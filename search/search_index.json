{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Contenidos \u00b6 El dise\u00f1o de webs tipo \"responsive\" permite crear webs adaptables a diferentes tama\u00f1os de pantalla, desde webs para pantallas tama\u00f1o escritorio, pasando por tablets, hasta webs para m\u00f3viles. Este tipo de dise\u00f1o se basa en crear un \u00fanico c\u00f3digo y utilizar reglas y estilos CSS para adaptar los contenidos a los diferentes tama\u00f1os de pantalla. Los contenidos principales del libro son: Introducci\u00f3n Frameworks responsive Funcionamiento del dise\u00f1o adaptable Probando el responsive P\u00e1gina b\u00e1sica Sistema de rejilla Forzar el cambio de fila Anidamiento de columnas M\u00e1rgenes o espaciado entre columnas Ordenaci\u00f3n de columnas Utilidades responsive Media Queries Componentes Responsive Botones Desplegables Grupos de botones Formularios Navegaci\u00f3n Barra de navegaci\u00f3n Tablas Ejercicios Bibliograf\u00eda","title":"Contenidos"},{"location":"index.html#contenidos","text":"El dise\u00f1o de webs tipo \"responsive\" permite crear webs adaptables a diferentes tama\u00f1os de pantalla, desde webs para pantallas tama\u00f1o escritorio, pasando por tablets, hasta webs para m\u00f3viles. Este tipo de dise\u00f1o se basa en crear un \u00fanico c\u00f3digo y utilizar reglas y estilos CSS para adaptar los contenidos a los diferentes tama\u00f1os de pantalla. Los contenidos principales del libro son: Introducci\u00f3n Frameworks responsive Funcionamiento del dise\u00f1o adaptable Probando el responsive P\u00e1gina b\u00e1sica Sistema de rejilla Forzar el cambio de fila Anidamiento de columnas M\u00e1rgenes o espaciado entre columnas Ordenaci\u00f3n de columnas Utilidades responsive Media Queries Componentes Responsive Botones Desplegables Grupos de botones Formularios Navegaci\u00f3n Barra de navegaci\u00f3n Tablas Ejercicios Bibliograf\u00eda","title":"Contenidos"},{"location":"bibliografia.html","text":"Bibliograf\u00eda \u00b6 http://getbootstrap.com/ P\u00e1gina oficial de Bootstrap desde donde descargar la librer\u00eda y consultar toda la documentaci\u00f3n. http://blog.getbootstrap.com/ El blog oficial de Bootstrap donde se publican las \u00faltimas novedades. Temas y plantillas gratuitas para Bootstrap: http://startbootstrap.com/ http://bootstrapzero.com/ http://bootswatch.com/ http://www.bootbundle.com/ http://bootsnipp.com Ejemplos y trozos de c\u00f3digo \u00fatiles para Bootstrap. Aqu\u00ed podr\u00e1s encontrar cientos de ejemplos, desde como hacer un formulario de login hasta todo tipo de elementos con animaciones o estilos avanzados. http://expo.getbootstrap.com/ Ejemplos inspiradores de uso de Bootstrap. http://startbootstrap.com/bootstrap-resources/ Listado complet\u00edsimo con todo tipo de recursos disponibles para Bootstrap.","title":"Bibliograf\u00eda"},{"location":"bibliografia.html#bibliografia","text":"http://getbootstrap.com/ P\u00e1gina oficial de Bootstrap desde donde descargar la librer\u00eda y consultar toda la documentaci\u00f3n. http://blog.getbootstrap.com/ El blog oficial de Bootstrap donde se publican las \u00faltimas novedades. Temas y plantillas gratuitas para Bootstrap: http://startbootstrap.com/ http://bootstrapzero.com/ http://bootswatch.com/ http://www.bootbundle.com/ http://bootsnipp.com Ejemplos y trozos de c\u00f3digo \u00fatiles para Bootstrap. Aqu\u00ed podr\u00e1s encontrar cientos de ejemplos, desde como hacer un formulario de login hasta todo tipo de elementos con animaciones o estilos avanzados. http://expo.getbootstrap.com/ Ejemplos inspiradores de uso de Bootstrap. http://startbootstrap.com/bootstrap-resources/ Listado complet\u00edsimo con todo tipo de recursos disponibles para Bootstrap.","title":"Bibliograf\u00eda"},{"location":"componentes-barra-de-navegacion.html","text":"Barra de navegaci\u00f3n \u00b6 Bootstrap nos facilita la creaci\u00f3n de la barra principal de navegaci\u00f3n de nuestra web mediante la clase .navbar . Esta barra se adaptar\u00e1 al tama\u00f1o de pantalla, mostrando los elementos colapsados en un bot\u00f3n en pantallas peque\u00f1as y de forma normal para pantallas m\u00e1s grandes. Para a\u00f1adir esta barra a nuestro sitio web utilizaremos la etiqueta \" <nav> \", que es la etiqueta de HTML 5 que identifica un elemento de navegaci\u00f3n. En caso de no usar esta etiqueta tambi\u00e9n podemos crear la barra de navegaci\u00f3n usando un \" <div> \", pero en este caso tendremos que a\u00f1adir el atributo role=\"navigation\" por cuestiones de accesibilidad. Adem\u00e1s, en esta etiqueta tambi\u00e9n a\u00f1adiremos dos etiquetas para indicar el estilo y los colores a aplicar con \" .navbar-light .bg-light \" (m\u00e1s adelante veremos qu\u00e9 otros colores podemos usar), y la etiqueta .navbar-expand-lg para indicar el tama\u00f1o a partir del cual la barra se mostrar\u00e1 de forma expandida. La etiqueta .navbar-expand-lg indica que la barra se mostrar\u00e1 en su tama\u00f1o completo a partir del tama\u00f1o de pantalla grande (lg), colaps\u00e1ndose para tama\u00f1os m\u00e1s peque\u00f1os. Este ser\u00eda el comportamiento por defecto, pero si queremos lo podemos modificar cambiando el tama\u00f1o \"lg\" por otro de los posibles tama\u00f1os definidos por Bootstrap: \" sm \", \" md \", \" lg \", \" xl \" o \" xxl \". Dentro de la etiqueta \" <nav> \" el contenido de la barra estar\u00e1 dividido en tres secciones: Nombre o logotipo de la web, marcado con la etiqueta \" .navbar-brand \". Bot\u00f3n toggler marcado con \" .navbar-toggler \", que se mostrar\u00e1 \u00fanicamente cuando el men\u00fa se colapse y se ocultar\u00e1 cuando el men\u00fa aparezca expandido. Cuando sea visible podremos pulsar sobre \u00e9l para mostrar u ocultar el men\u00fa. Las opciones de men\u00fa, las cuales las a\u00f1adiremos dentro de una lista tipo \" <ul> \" con la clase \" .navbar-nav \". Adem\u00e1s, esta lista la tendremos que meter dentro de una caja \" <div> \" con las clases \" .collapse .navbar-collapse \", que definir\u00e1 la zona que se colapsar\u00e1 (u ocultar\u00e1) para pantallas peque\u00f1as. Cada elemento de la lista de men\u00fa <ul> se definir\u00e1 mediante una etiqueta \" <li> \" sobre la que aplicaremos la clase \" .nav-item \". Adem\u00e1s, como ya veremos m\u00e1s adelante, podremos a\u00f1adir otros elementos dentro de las opciones de men\u00fa, como por ejemplo un formulario. A continuaci\u00f3n se incluye un ejemplo completo de una barra de navegaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 < nav class = \"navbar navbar-expand-lg navbar-light bg-light\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > Navbar </ a > < button class = \"navbar-toggler\" type = \"button\" data-bs-toggle = \"collapse\" data-bs-target = \"#navbarSupportedContent\" aria-controls = \"navbarSupportedContent\" aria-expanded = \"false\" aria-label = \"Toggle navigation\" > < span class = \"navbar-toggler-icon\" ></ span > </ button > < div class = \"collapse navbar-collapse\" id = \"navbarSupportedContent\" > < ul class = \"navbar-nav me-auto mb-2 mb-lg-0\" > < li class = \"nav-item\" > < a class = \"nav-link active\" aria-current = \"page\" href = \"#\" > Home </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item dropdown\" > < a class = \"nav-link dropdown-toggle\" href = \"#\" id = \"navbarDropdown\" role = \"button\" data-bs-toggle = \"dropdown\" aria-expanded = \"false\" > Dropdown </ a > < ul class = \"dropdown-menu\" aria-labelledby = \"navbarDropdown\" > < li >< a class = \"dropdown-item\" href = \"#\" > Action </ a ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Another action </ a ></ li > < li >< hr class = \"dropdown-divider\" ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Something else here </ a ></ li > </ ul > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" > Disabled </ a > </ li > </ ul > < form class = \"d-flex\" > < input class = \"form-control me-2\" type = \"search\" placeholder = \"Search\" aria-label = \"Search\" > < button class = \"btn btn-outline-success\" type = \"submit\" > Search </ button > </ form > </ div > </ div > </ nav > Si a\u00f1adimos este c\u00f3digo a nuestro sitio Web y lo visualizamos con un navegador, obtendremos el siguiente resultado cuando lo visualicemos en pantallas medianas y grandes: En las pantallas peque\u00f1as los elementos de navegaci\u00f3n se colapsar\u00edan en un bot\u00f3n ( toggler ), de la forma: Imagen en la barra de navegaci\u00f3n \u00b6 Para incluir el logotipo de nuestra web en la barra de navegaci\u00f3n tenemos que modificar la secci\u00f3n navbar-brand del ejemplo anterior para incluir la etiqueta <img> , de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 < nav class = \"navbar navbar-expand-lg navbar-light bg-light\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > < img src = \"/assets/brand/bootstrap-solid.svg\" width = \"30\" height = \"30\" alt = \"\" > </ a > ... </ div > </ nav > <!-- O si queremos incluir un logotipo y texto... --> < nav class = \"navbar navbar-expand-lg navbar-light bg-light\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > < img src = \"/assets/brand/bootstrap-solid.svg\" width = \"30\" height = \"30\" class = \"d-inline-block align-top\" alt = \"\" > Bootstrap </ a > ... </ div > </ nav > Con lo que obtendr\u00edamos los siguiente resultados, en el primer caso se mostrar\u00eda el logotipo Es posible que sea necesario a\u00f1adir o modificar los estilos para disponer correctamente la imagen en la barra de navegaci\u00f3n. Barra de navegaci\u00f3n con formulario \u00b6 Podemos a\u00f1adir formularios a nuestra barra de navegaci\u00f3n utilizando el tipo de formulario inline, definido con \" .form-inline \" como vimos en la secci\u00f3n \"Formularios\", por ejemplo: 1 2 3 4 5 6 7 8 9 < nav class = \"navbar navbar-light bg-light\" > < div class = \"container-fluid\" > ... < form class = \"d-flex\" > < input class = \"form-control me-2\" type = \"search\" placeholder = \"Search\" aria-label = \"Search\" > < button class = \"btn btn-outline-success\" type = \"submit\" > Search </ button > </ form > </ div > </ nav > Obteniendo: Anclajes de la barra de navegaci\u00f3n \u00b6 Bootstrap nos permite anclar o fijar la posici\u00f3n de la barra de tres formas distintas: fijarla a la parte superior a\u00f1adiendo la clase .fixed-top a la etiqueta nav, fijarla a la parte inferior con .fixed-bottom , o usar el modo sticky (o pegajoso) con la etiqueta .sticky-top , el cual anclar\u00e1 la barra a la parte superior mientras se realiza scroll y cuando se alcanza el tope permanecer\u00e1 fija. A continuaci\u00f3n se incluye un ejemplo de cada uno de estos modos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- Fixed top --> < nav class = \"navbar fixed-top navbar-light bg-light\" > ... </ nav > <!-- Fixed bottom --> < nav class = \"navbar fixed-bottom navbar-light bg-light\" > ... </ nav > <!-- Sticky top --> < nav class = \"navbar sticky-top navbar-light bg-light\" > ... </ nav > En los modos \" .fixed-top \" y \" .fixed-bottom \", dado que la barra se colocar\u00e1 de forma \"flotante\" sobre el contenido, es posible que oculte una parte del mismo. Para solucionar esto es necesario a\u00f1adir un peque\u00f1o espaciado superior o inferior a la etiqueta <body> . El alto de la barra es de 50px, por lo que se suele recomendar un espaciado de 70px, de la forma: 1 2 body { padding-top : 70 px ; } /* En el caso de .fixed-top */ body { padding-bottom : 70 px ; } /* En el caso de .fixed-bottom */ Colores de la barra de navegaci\u00f3n \u00b6 Podemos personalizar el color de la barra y los elementos que la componen de una forma muy sencilla. En primer lugar tendremos que elegir entre el tema claro ( .navbar-light ) o el tema oscuro ( .navbar-dark ), y adem\u00e1s asignar un color de fondo con las clases .bg-* para personalizar el color (a continuaci\u00f3n se incluye la lista de colores posibles). Por ejemplo podr\u00edamos modificar la barra de navegaci\u00f3n de las siguientes formas: 1 2 3 4 5 6 7 8 9 10 11 < nav class = \"navbar navbar-dark bg-dark\" > <!-- ... --> </ nav > < nav class = \"navbar navbar-dark bg-primary\" > <!-- ... --> </ nav > < nav class = \"navbar navbar-light\" style = \"background-color: #e3f2fd;\" > <!-- ... --> </ nav > Con lo que obtendr\u00edamos los siguientes resultados: Los posibles colores que podemos elegir como fondo para la barra de navegaci\u00f3n son los siguientes: .bg-primary , .bg-secondary , .bg-success , .bg-danger , .bg-warning , .bg-info , .bg-light , .bg-dark y .bg-white . Adem\u00e1s de poder aplicarlo sobre la barra de navegaci\u00f3n tambi\u00e9n se pueden utilizar para definir el color de fondo de cualquier otro elemento. A continuaci\u00f3n se incluye una imagen de estos colores:","title":"Barra de navegaci\u00f3n"},{"location":"componentes-barra-de-navegacion.html#barra-de-navegacion","text":"Bootstrap nos facilita la creaci\u00f3n de la barra principal de navegaci\u00f3n de nuestra web mediante la clase .navbar . Esta barra se adaptar\u00e1 al tama\u00f1o de pantalla, mostrando los elementos colapsados en un bot\u00f3n en pantallas peque\u00f1as y de forma normal para pantallas m\u00e1s grandes. Para a\u00f1adir esta barra a nuestro sitio web utilizaremos la etiqueta \" <nav> \", que es la etiqueta de HTML 5 que identifica un elemento de navegaci\u00f3n. En caso de no usar esta etiqueta tambi\u00e9n podemos crear la barra de navegaci\u00f3n usando un \" <div> \", pero en este caso tendremos que a\u00f1adir el atributo role=\"navigation\" por cuestiones de accesibilidad. Adem\u00e1s, en esta etiqueta tambi\u00e9n a\u00f1adiremos dos etiquetas para indicar el estilo y los colores a aplicar con \" .navbar-light .bg-light \" (m\u00e1s adelante veremos qu\u00e9 otros colores podemos usar), y la etiqueta .navbar-expand-lg para indicar el tama\u00f1o a partir del cual la barra se mostrar\u00e1 de forma expandida. La etiqueta .navbar-expand-lg indica que la barra se mostrar\u00e1 en su tama\u00f1o completo a partir del tama\u00f1o de pantalla grande (lg), colaps\u00e1ndose para tama\u00f1os m\u00e1s peque\u00f1os. Este ser\u00eda el comportamiento por defecto, pero si queremos lo podemos modificar cambiando el tama\u00f1o \"lg\" por otro de los posibles tama\u00f1os definidos por Bootstrap: \" sm \", \" md \", \" lg \", \" xl \" o \" xxl \". Dentro de la etiqueta \" <nav> \" el contenido de la barra estar\u00e1 dividido en tres secciones: Nombre o logotipo de la web, marcado con la etiqueta \" .navbar-brand \". Bot\u00f3n toggler marcado con \" .navbar-toggler \", que se mostrar\u00e1 \u00fanicamente cuando el men\u00fa se colapse y se ocultar\u00e1 cuando el men\u00fa aparezca expandido. Cuando sea visible podremos pulsar sobre \u00e9l para mostrar u ocultar el men\u00fa. Las opciones de men\u00fa, las cuales las a\u00f1adiremos dentro de una lista tipo \" <ul> \" con la clase \" .navbar-nav \". Adem\u00e1s, esta lista la tendremos que meter dentro de una caja \" <div> \" con las clases \" .collapse .navbar-collapse \", que definir\u00e1 la zona que se colapsar\u00e1 (u ocultar\u00e1) para pantallas peque\u00f1as. Cada elemento de la lista de men\u00fa <ul> se definir\u00e1 mediante una etiqueta \" <li> \" sobre la que aplicaremos la clase \" .nav-item \". Adem\u00e1s, como ya veremos m\u00e1s adelante, podremos a\u00f1adir otros elementos dentro de las opciones de men\u00fa, como por ejemplo un formulario. A continuaci\u00f3n se incluye un ejemplo completo de una barra de navegaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 < nav class = \"navbar navbar-expand-lg navbar-light bg-light\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > Navbar </ a > < button class = \"navbar-toggler\" type = \"button\" data-bs-toggle = \"collapse\" data-bs-target = \"#navbarSupportedContent\" aria-controls = \"navbarSupportedContent\" aria-expanded = \"false\" aria-label = \"Toggle navigation\" > < span class = \"navbar-toggler-icon\" ></ span > </ button > < div class = \"collapse navbar-collapse\" id = \"navbarSupportedContent\" > < ul class = \"navbar-nav me-auto mb-2 mb-lg-0\" > < li class = \"nav-item\" > < a class = \"nav-link active\" aria-current = \"page\" href = \"#\" > Home </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item dropdown\" > < a class = \"nav-link dropdown-toggle\" href = \"#\" id = \"navbarDropdown\" role = \"button\" data-bs-toggle = \"dropdown\" aria-expanded = \"false\" > Dropdown </ a > < ul class = \"dropdown-menu\" aria-labelledby = \"navbarDropdown\" > < li >< a class = \"dropdown-item\" href = \"#\" > Action </ a ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Another action </ a ></ li > < li >< hr class = \"dropdown-divider\" ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Something else here </ a ></ li > </ ul > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" > Disabled </ a > </ li > </ ul > < form class = \"d-flex\" > < input class = \"form-control me-2\" type = \"search\" placeholder = \"Search\" aria-label = \"Search\" > < button class = \"btn btn-outline-success\" type = \"submit\" > Search </ button > </ form > </ div > </ div > </ nav > Si a\u00f1adimos este c\u00f3digo a nuestro sitio Web y lo visualizamos con un navegador, obtendremos el siguiente resultado cuando lo visualicemos en pantallas medianas y grandes: En las pantallas peque\u00f1as los elementos de navegaci\u00f3n se colapsar\u00edan en un bot\u00f3n ( toggler ), de la forma:","title":"Barra de navegaci\u00f3n"},{"location":"componentes-barra-de-navegacion.html#imagen-en-la-barra-de-navegacion","text":"Para incluir el logotipo de nuestra web en la barra de navegaci\u00f3n tenemos que modificar la secci\u00f3n navbar-brand del ejemplo anterior para incluir la etiqueta <img> , de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 < nav class = \"navbar navbar-expand-lg navbar-light bg-light\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > < img src = \"/assets/brand/bootstrap-solid.svg\" width = \"30\" height = \"30\" alt = \"\" > </ a > ... </ div > </ nav > <!-- O si queremos incluir un logotipo y texto... --> < nav class = \"navbar navbar-expand-lg navbar-light bg-light\" > < div class = \"container-fluid\" > < a class = \"navbar-brand\" href = \"#\" > < img src = \"/assets/brand/bootstrap-solid.svg\" width = \"30\" height = \"30\" class = \"d-inline-block align-top\" alt = \"\" > Bootstrap </ a > ... </ div > </ nav > Con lo que obtendr\u00edamos los siguiente resultados, en el primer caso se mostrar\u00eda el logotipo Es posible que sea necesario a\u00f1adir o modificar los estilos para disponer correctamente la imagen en la barra de navegaci\u00f3n.","title":"Imagen en la barra de navegaci\u00f3n"},{"location":"componentes-barra-de-navegacion.html#barra-de-navegacion-con-formulario","text":"Podemos a\u00f1adir formularios a nuestra barra de navegaci\u00f3n utilizando el tipo de formulario inline, definido con \" .form-inline \" como vimos en la secci\u00f3n \"Formularios\", por ejemplo: 1 2 3 4 5 6 7 8 9 < nav class = \"navbar navbar-light bg-light\" > < div class = \"container-fluid\" > ... < form class = \"d-flex\" > < input class = \"form-control me-2\" type = \"search\" placeholder = \"Search\" aria-label = \"Search\" > < button class = \"btn btn-outline-success\" type = \"submit\" > Search </ button > </ form > </ div > </ nav > Obteniendo:","title":"Barra de navegaci\u00f3n con formulario"},{"location":"componentes-barra-de-navegacion.html#anclajes-de-la-barra-de-navegacion","text":"Bootstrap nos permite anclar o fijar la posici\u00f3n de la barra de tres formas distintas: fijarla a la parte superior a\u00f1adiendo la clase .fixed-top a la etiqueta nav, fijarla a la parte inferior con .fixed-bottom , o usar el modo sticky (o pegajoso) con la etiqueta .sticky-top , el cual anclar\u00e1 la barra a la parte superior mientras se realiza scroll y cuando se alcanza el tope permanecer\u00e1 fija. A continuaci\u00f3n se incluye un ejemplo de cada uno de estos modos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- Fixed top --> < nav class = \"navbar fixed-top navbar-light bg-light\" > ... </ nav > <!-- Fixed bottom --> < nav class = \"navbar fixed-bottom navbar-light bg-light\" > ... </ nav > <!-- Sticky top --> < nav class = \"navbar sticky-top navbar-light bg-light\" > ... </ nav > En los modos \" .fixed-top \" y \" .fixed-bottom \", dado que la barra se colocar\u00e1 de forma \"flotante\" sobre el contenido, es posible que oculte una parte del mismo. Para solucionar esto es necesario a\u00f1adir un peque\u00f1o espaciado superior o inferior a la etiqueta <body> . El alto de la barra es de 50px, por lo que se suele recomendar un espaciado de 70px, de la forma: 1 2 body { padding-top : 70 px ; } /* En el caso de .fixed-top */ body { padding-bottom : 70 px ; } /* En el caso de .fixed-bottom */","title":"Anclajes de la barra de navegaci\u00f3n"},{"location":"componentes-barra-de-navegacion.html#colores-de-la-barra-de-navegacion","text":"Podemos personalizar el color de la barra y los elementos que la componen de una forma muy sencilla. En primer lugar tendremos que elegir entre el tema claro ( .navbar-light ) o el tema oscuro ( .navbar-dark ), y adem\u00e1s asignar un color de fondo con las clases .bg-* para personalizar el color (a continuaci\u00f3n se incluye la lista de colores posibles). Por ejemplo podr\u00edamos modificar la barra de navegaci\u00f3n de las siguientes formas: 1 2 3 4 5 6 7 8 9 10 11 < nav class = \"navbar navbar-dark bg-dark\" > <!-- ... --> </ nav > < nav class = \"navbar navbar-dark bg-primary\" > <!-- ... --> </ nav > < nav class = \"navbar navbar-light\" style = \"background-color: #e3f2fd;\" > <!-- ... --> </ nav > Con lo que obtendr\u00edamos los siguientes resultados: Los posibles colores que podemos elegir como fondo para la barra de navegaci\u00f3n son los siguientes: .bg-primary , .bg-secondary , .bg-success , .bg-danger , .bg-warning , .bg-info , .bg-light , .bg-dark y .bg-white . Adem\u00e1s de poder aplicarlo sobre la barra de navegaci\u00f3n tambi\u00e9n se pueden utilizar para definir el color de fondo de cualquier otro elemento. A continuaci\u00f3n se incluye una imagen de estos colores:","title":"Colores de la barra de navegaci\u00f3n"},{"location":"componentes-botones.html","text":"Botones \u00b6 Mediante la clase .btn podemos aplicar estilo a los elementos tipo button . Esta clase la podemos combinar con .btn-primary , .btn-secondary , .btn-success , .btn-danger , .btn-warning , .btn-info , .btn-light , .btn-dark o .btn-link para crear botones para diferentes estados o acciones en nuestros formularios: 1 2 3 4 5 6 7 8 9 < button type = \"button\" class = \"btn btn-primary\" > Primary </ button > < button type = \"button\" class = \"btn btn-secondary\" > Secondary </ button > < button type = \"button\" class = \"btn btn-success\" > Success </ button > < button type = \"button\" class = \"btn btn-danger\" > Danger </ button > < button type = \"button\" class = \"btn btn-warning\" > Warning </ button > < button type = \"button\" class = \"btn btn-info\" > Info </ button > < button type = \"button\" class = \"btn btn-light\" > Light </ button > < button type = \"button\" class = \"btn btn-dark\" > Dark </ button > < button type = \"button\" class = \"btn btn-link\" > Link </ button > Con lo que ontendr\u00edamos el siguiente resultado: Elementos tipo bot\u00f3n \u00b6 Estas clases no son exclusivas para las etiquetas button sino que tambi\u00e9n funcionar\u00e1n de la misma forma con <a> y <input> : 1 2 3 4 5 < a class = \"btn btn-primary\" href = \"#\" role = \"button\" > Link </ a > < button class = \"btn btn-primary\" type = \"submit\" > Button </ button > < input class = \"btn btn-primary\" type = \"button\" value = \"Input\" > < input class = \"btn btn-primary\" type = \"submit\" value = \"Submit\" > < input class = \"btn btn-primary\" type = \"reset\" value = \"Reset\" > Obteniendo en todos los casos botones con la misma apariencia: Tama\u00f1o de los botones \u00b6 Podemos variar el tama\u00f1o de los botones simplemente a\u00f1adiendo las clases .btn-lg o .btn-sm , para obtener botones con un tama\u00f1o m\u00e1s grande o m\u00e1s peque\u00f1o. Por ejemplo, con el siguiente c\u00f3digo: 1 2 < button type = \"button\" class = \"btn btn-primary btn-lg\" > Large button </ button > < button type = \"button\" class = \"btn btn-primary btn-sm\" > Small button </ button > Obtendr\u00edamos el siguiente resultado:","title":"Botones"},{"location":"componentes-botones.html#botones","text":"Mediante la clase .btn podemos aplicar estilo a los elementos tipo button . Esta clase la podemos combinar con .btn-primary , .btn-secondary , .btn-success , .btn-danger , .btn-warning , .btn-info , .btn-light , .btn-dark o .btn-link para crear botones para diferentes estados o acciones en nuestros formularios: 1 2 3 4 5 6 7 8 9 < button type = \"button\" class = \"btn btn-primary\" > Primary </ button > < button type = \"button\" class = \"btn btn-secondary\" > Secondary </ button > < button type = \"button\" class = \"btn btn-success\" > Success </ button > < button type = \"button\" class = \"btn btn-danger\" > Danger </ button > < button type = \"button\" class = \"btn btn-warning\" > Warning </ button > < button type = \"button\" class = \"btn btn-info\" > Info </ button > < button type = \"button\" class = \"btn btn-light\" > Light </ button > < button type = \"button\" class = \"btn btn-dark\" > Dark </ button > < button type = \"button\" class = \"btn btn-link\" > Link </ button > Con lo que ontendr\u00edamos el siguiente resultado:","title":"Botones"},{"location":"componentes-botones.html#elementos-tipo-boton","text":"Estas clases no son exclusivas para las etiquetas button sino que tambi\u00e9n funcionar\u00e1n de la misma forma con <a> y <input> : 1 2 3 4 5 < a class = \"btn btn-primary\" href = \"#\" role = \"button\" > Link </ a > < button class = \"btn btn-primary\" type = \"submit\" > Button </ button > < input class = \"btn btn-primary\" type = \"button\" value = \"Input\" > < input class = \"btn btn-primary\" type = \"submit\" value = \"Submit\" > < input class = \"btn btn-primary\" type = \"reset\" value = \"Reset\" > Obteniendo en todos los casos botones con la misma apariencia:","title":"Elementos tipo bot\u00f3n"},{"location":"componentes-botones.html#tamano-de-los-botones","text":"Podemos variar el tama\u00f1o de los botones simplemente a\u00f1adiendo las clases .btn-lg o .btn-sm , para obtener botones con un tama\u00f1o m\u00e1s grande o m\u00e1s peque\u00f1o. Por ejemplo, con el siguiente c\u00f3digo: 1 2 < button type = \"button\" class = \"btn btn-primary btn-lg\" > Large button </ button > < button type = \"button\" class = \"btn btn-primary btn-sm\" > Small button </ button > Obtendr\u00edamos el siguiente resultado:","title":"Tama\u00f1o de los botones"},{"location":"componentes-desplegables.html","text":"Desplegables \u00b6 Bootstrap nos facilita la creaci\u00f3n de botones con listas de opciones desplegables mediante la clase .dropdown . Este elemento requiere que el plugin JavaScript de Bootstrap est\u00e9 incluido en la plantilla. La estructura b\u00e1sica para crear un elemento de este tipo es la siguiente: 1 2 3 4 5 6 7 8 9 10 < div class = \"dropdown\" > < button class = \"btn btn-secondary dropdown-toggle\" type = \"button\" id = \"dropdownMenuButton1\" data-bs-toggle = \"dropdown\" aria-expanded = \"false\" > Dropdown button </ button > < ul class = \"dropdown-menu\" aria-labelledby = \"dropdownMenuButton1\" > < li >< a class = \"dropdown-item\" href = \"#\" > Action </ a ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Another action </ a ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Something else here </ a ></ li > </ ul > </ div > Con lo que obtendr\u00edamos el siguiente resultado: Sobre el bot\u00f3n principal podemos aplicar todos los colores de botones que hemos visto en la secci\u00f3n titulada \"Botones\", por ejemplo \" .btn-success \" o \" .btn-danger \". Tambi\u00e9n podemos a\u00f1adir los modificadores de tama\u00f1o \" .btn-lg \" y \" .btn-sm \" para aumentar o disminuir el tama\u00f1o del bot\u00f3n del desplegable. Si nos fijamos en el c\u00f3digo anterior, para el bot\u00f3n principal se ha usado la etiqueta \" button \" y los elementos del desplegable se definen mediante una lista ( <ul><li></li></ul> ). Sin embargo, el bot\u00f3n se puede definir tambi\u00e9n mediante la etiqueta \" a \" y el desplegable se puede crear usando un <div> en lugar de la lista <ul> y directamente las etiquetas a para cada uno de los elementos del desplegable, es decir, eliminando las etiquetas li . Los atributos que empiezan con \"aria\" son para crear contenido accesible, para que los lectores de pantalla pueden encontrar las etiquetas correctas a la hora de interpretar el contenido. Para m\u00e1s informaci\u00f3n consultar la documentaci\u00f3n sobre HTML 5 ARIA. Para alinear un men\u00fa a la derecha se puede a\u00f1adir la clase .dropdown-menu-end a la lista \" dropdown-menu \", por ejemplo: 1 < div class = \"dropdown-menu dropdown-menu-end\" > Encabezados en un desplegable \u00b6 Para a\u00f1adir un encabezado (o varios) y dividir en secciones un desplegable podemos utilizar la clase .dropdown-header de la siguiente forma: 1 2 3 4 5 < div class = \"dropdown-menu\" > < h6 class = \"dropdown-header\" > Dropdown header </ h6 > < a class = \"dropdown-item\" href = \"#\" > Action </ a > < a class = \"dropdown-item\" href = \"#\" > Another action </ a > </ div > Con lo que obtendremos: Separadores en un desplegable \u00b6 Tambi\u00e9n podemos a\u00f1adir separadores en un desplegable mediante la clase .dropdown-divider de la forma: 1 2 3 4 5 6 7 < div class = \"dropdown-menu\" > < a class = \"dropdown-item\" href = \"#\" > Action </ a > < a class = \"dropdown-item\" href = \"#\" > Another action </ a > < a class = \"dropdown-item\" href = \"#\" > Something else here </ a > < div class = \"dropdown-divider\" ></ div > < a class = \"dropdown-item\" href = \"#\" > Separated link </ a > </ div > Con lo que obtendr\u00edamos el siguiente listado con separador:","title":"Desplegables"},{"location":"componentes-desplegables.html#desplegables","text":"Bootstrap nos facilita la creaci\u00f3n de botones con listas de opciones desplegables mediante la clase .dropdown . Este elemento requiere que el plugin JavaScript de Bootstrap est\u00e9 incluido en la plantilla. La estructura b\u00e1sica para crear un elemento de este tipo es la siguiente: 1 2 3 4 5 6 7 8 9 10 < div class = \"dropdown\" > < button class = \"btn btn-secondary dropdown-toggle\" type = \"button\" id = \"dropdownMenuButton1\" data-bs-toggle = \"dropdown\" aria-expanded = \"false\" > Dropdown button </ button > < ul class = \"dropdown-menu\" aria-labelledby = \"dropdownMenuButton1\" > < li >< a class = \"dropdown-item\" href = \"#\" > Action </ a ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Another action </ a ></ li > < li >< a class = \"dropdown-item\" href = \"#\" > Something else here </ a ></ li > </ ul > </ div > Con lo que obtendr\u00edamos el siguiente resultado: Sobre el bot\u00f3n principal podemos aplicar todos los colores de botones que hemos visto en la secci\u00f3n titulada \"Botones\", por ejemplo \" .btn-success \" o \" .btn-danger \". Tambi\u00e9n podemos a\u00f1adir los modificadores de tama\u00f1o \" .btn-lg \" y \" .btn-sm \" para aumentar o disminuir el tama\u00f1o del bot\u00f3n del desplegable. Si nos fijamos en el c\u00f3digo anterior, para el bot\u00f3n principal se ha usado la etiqueta \" button \" y los elementos del desplegable se definen mediante una lista ( <ul><li></li></ul> ). Sin embargo, el bot\u00f3n se puede definir tambi\u00e9n mediante la etiqueta \" a \" y el desplegable se puede crear usando un <div> en lugar de la lista <ul> y directamente las etiquetas a para cada uno de los elementos del desplegable, es decir, eliminando las etiquetas li . Los atributos que empiezan con \"aria\" son para crear contenido accesible, para que los lectores de pantalla pueden encontrar las etiquetas correctas a la hora de interpretar el contenido. Para m\u00e1s informaci\u00f3n consultar la documentaci\u00f3n sobre HTML 5 ARIA. Para alinear un men\u00fa a la derecha se puede a\u00f1adir la clase .dropdown-menu-end a la lista \" dropdown-menu \", por ejemplo: 1 < div class = \"dropdown-menu dropdown-menu-end\" >","title":"Desplegables"},{"location":"componentes-desplegables.html#encabezados-en-un-desplegable","text":"Para a\u00f1adir un encabezado (o varios) y dividir en secciones un desplegable podemos utilizar la clase .dropdown-header de la siguiente forma: 1 2 3 4 5 < div class = \"dropdown-menu\" > < h6 class = \"dropdown-header\" > Dropdown header </ h6 > < a class = \"dropdown-item\" href = \"#\" > Action </ a > < a class = \"dropdown-item\" href = \"#\" > Another action </ a > </ div > Con lo que obtendremos:","title":"Encabezados en un desplegable"},{"location":"componentes-desplegables.html#separadores-en-un-desplegable","text":"Tambi\u00e9n podemos a\u00f1adir separadores en un desplegable mediante la clase .dropdown-divider de la forma: 1 2 3 4 5 6 7 < div class = \"dropdown-menu\" > < a class = \"dropdown-item\" href = \"#\" > Action </ a > < a class = \"dropdown-item\" href = \"#\" > Another action </ a > < a class = \"dropdown-item\" href = \"#\" > Something else here </ a > < div class = \"dropdown-divider\" ></ div > < a class = \"dropdown-item\" href = \"#\" > Separated link </ a > </ div > Con lo que obtendr\u00edamos el siguiente listado con separador:","title":"Separadores en un desplegable"},{"location":"componentes-formularios.html","text":"Formularios \u00b6 Bootstrap aplica estilos a los elementos de tipo formulario para convertirlos en elementos responsive, mejorar su apariencia y permitirnos crear diferentes alineaciones. La estructura b\u00e1sica de un formulario es la siguiente: 1 2 3 4 5 6 7 < form > < div > < label for = \"exampleInputEmail1\" class = \"form-label\" > Email address </ label > < input type = \"email\" class = \"form-control\" id = \"exampleInputEmail1\" aria-describedby = \"emailHelp\" placeholder = \"Enter email\" > </ div > </ form > Con lo que obtendr\u00edamos un formulario en vertical como el de la siguiente figura, es decir, los elementos del formulario se dispondr\u00e1n en vertical, unos debajos de otros. Para permitir que Bootstrap ajuste correctamente el espaciado, cada bloque o grupo de un formulario (normalmente formado por una etiqueta label y alg\u00fan elemento de entrada de datos como un input , textarea , etc.) tendr\u00e1 que estar agrupado por una caja contenedora <div></div> . Adem\u00e1s, a cada label se le tiene que aplicar la clase .form-label y a cada input la clase .form-control . Bootstrap sobrecarga y aplica estilos a los principales elementos de formulario definidos en HTML 5, como son: text, password, datetime, datetime-local, date, month, time, week, number, email, url, search, tel y color . Formulario inline \u00b6 Mediante la utilizaci\u00f3n del sistema de rejilla de Bootstrap podemos crear distintas disposiciones para los formularios. la clase .form-inline sobre la etiqueta <form> podemos crear formularios que se dispondr\u00e1n en una sola l\u00ednea. A continuaci\u00f3n se incluye un ejemplo de este tipo de formularios: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < form > < div class = \"row\" > < div class = \"col-auto\" > < label class = \"visually-hidden form-label\" > User </ label > < input type = \"email\" class = \"form-control\" placeholder = \"User\" > </ div > < div class = \"col-auto\" > < label class = \"visually-hidden form-label\" > Password </ label > < input type = \"password\" class = \"form-control\" placeholder = \"Pass\" > </ div > < div class = \"col-auto\" > < button type = \"submit\" class = \"btn btn-primary\" > Confirm </ button > </ div > </ div > </ form > Obteniendo el siguiente resultado: Aunque los campos del formulario no contengan etiquetas ( labels ) es necesario incluirlas por cuestiones de accesibilidad, para dar soporte a los lectores de pantalla. Por este motivo se han incluido en el ejemplo anterior con la clase .visually-hidden . Formulario horizontal \u00b6 Mediante el uso del sistema de rejilla de Bootstrap tambi\u00e9n podemos crear formularios horizontales cuyos elementos cambien de tama\u00f1o o alineaci\u00f3n en funci\u00f3n del tama\u00f1o de pantalla. Para esto tendremos que crear una fila ( .row ) por cada grupo, y situar la etiqueta y el input cada uno en una columna. A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < form > < div class = \"row mb-3\" > < label for = \"inputEmail3\" class = \"col-sm-2 col-form-label\" > Email </ label > < div class = \"col-sm-10\" > < input type = \"email\" class = \"form-control\" id = \"inputEmail3\" placeholder = \"Email\" > </ div > </ div > < div class = \"row mb-3\" > < label for = \"inputPassword3\" class = \"col-sm-2 col-form-label\" > Password </ label > < div class = \"col-sm-10\" > < input type = \"password\" class = \"form-control\" id = \"inputPassword3\" placeholder = \"Password\" > </ div > </ div > < div class = \"row mb-3\" > < div class = \"col-sm-2\" > Checkbox </ div > < div class = \"col-sm-10\" > < div class = \"form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" > Check me out </ label > </ div > </ div > </ div > < div class = \"row mb-3\" > < div class = \"col-sm-10\" > < button type = \"submit\" class = \"btn btn-primary\" > Sign in </ button > </ div > </ div > </ form > Con lo que obtendr\u00edamos: Es importante que nos fijemos que la etiqueta .row se a\u00f1ade al div de cada grupo. Adem\u00e1s, podemos aplicar la clase de las columnas para las etiquetas label directamente sobre dicho elemento, sin necesidad de crear una caja contenedora. Aunque en este caso tendremos que cambiar la clase .form-label por la clase .col-form-label .","title":"Formularios"},{"location":"componentes-formularios.html#formularios","text":"Bootstrap aplica estilos a los elementos de tipo formulario para convertirlos en elementos responsive, mejorar su apariencia y permitirnos crear diferentes alineaciones. La estructura b\u00e1sica de un formulario es la siguiente: 1 2 3 4 5 6 7 < form > < div > < label for = \"exampleInputEmail1\" class = \"form-label\" > Email address </ label > < input type = \"email\" class = \"form-control\" id = \"exampleInputEmail1\" aria-describedby = \"emailHelp\" placeholder = \"Enter email\" > </ div > </ form > Con lo que obtendr\u00edamos un formulario en vertical como el de la siguiente figura, es decir, los elementos del formulario se dispondr\u00e1n en vertical, unos debajos de otros. Para permitir que Bootstrap ajuste correctamente el espaciado, cada bloque o grupo de un formulario (normalmente formado por una etiqueta label y alg\u00fan elemento de entrada de datos como un input , textarea , etc.) tendr\u00e1 que estar agrupado por una caja contenedora <div></div> . Adem\u00e1s, a cada label se le tiene que aplicar la clase .form-label y a cada input la clase .form-control . Bootstrap sobrecarga y aplica estilos a los principales elementos de formulario definidos en HTML 5, como son: text, password, datetime, datetime-local, date, month, time, week, number, email, url, search, tel y color .","title":"Formularios"},{"location":"componentes-formularios.html#formulario-inline","text":"Mediante la utilizaci\u00f3n del sistema de rejilla de Bootstrap podemos crear distintas disposiciones para los formularios. la clase .form-inline sobre la etiqueta <form> podemos crear formularios que se dispondr\u00e1n en una sola l\u00ednea. A continuaci\u00f3n se incluye un ejemplo de este tipo de formularios: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < form > < div class = \"row\" > < div class = \"col-auto\" > < label class = \"visually-hidden form-label\" > User </ label > < input type = \"email\" class = \"form-control\" placeholder = \"User\" > </ div > < div class = \"col-auto\" > < label class = \"visually-hidden form-label\" > Password </ label > < input type = \"password\" class = \"form-control\" placeholder = \"Pass\" > </ div > < div class = \"col-auto\" > < button type = \"submit\" class = \"btn btn-primary\" > Confirm </ button > </ div > </ div > </ form > Obteniendo el siguiente resultado: Aunque los campos del formulario no contengan etiquetas ( labels ) es necesario incluirlas por cuestiones de accesibilidad, para dar soporte a los lectores de pantalla. Por este motivo se han incluido en el ejemplo anterior con la clase .visually-hidden .","title":"Formulario inline"},{"location":"componentes-formularios.html#formulario-horizontal","text":"Mediante el uso del sistema de rejilla de Bootstrap tambi\u00e9n podemos crear formularios horizontales cuyos elementos cambien de tama\u00f1o o alineaci\u00f3n en funci\u00f3n del tama\u00f1o de pantalla. Para esto tendremos que crear una fila ( .row ) por cada grupo, y situar la etiqueta y el input cada uno en una columna. A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < form > < div class = \"row mb-3\" > < label for = \"inputEmail3\" class = \"col-sm-2 col-form-label\" > Email </ label > < div class = \"col-sm-10\" > < input type = \"email\" class = \"form-control\" id = \"inputEmail3\" placeholder = \"Email\" > </ div > </ div > < div class = \"row mb-3\" > < label for = \"inputPassword3\" class = \"col-sm-2 col-form-label\" > Password </ label > < div class = \"col-sm-10\" > < input type = \"password\" class = \"form-control\" id = \"inputPassword3\" placeholder = \"Password\" > </ div > </ div > < div class = \"row mb-3\" > < div class = \"col-sm-2\" > Checkbox </ div > < div class = \"col-sm-10\" > < div class = \"form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" > Check me out </ label > </ div > </ div > </ div > < div class = \"row mb-3\" > < div class = \"col-sm-10\" > < button type = \"submit\" class = \"btn btn-primary\" > Sign in </ button > </ div > </ div > </ form > Con lo que obtendr\u00edamos: Es importante que nos fijemos que la etiqueta .row se a\u00f1ade al div de cada grupo. Adem\u00e1s, podemos aplicar la clase de las columnas para las etiquetas label directamente sobre dicho elemento, sin necesidad de crear una caja contenedora. Aunque en este caso tendremos que cambiar la clase .form-label por la clase .col-form-label .","title":"Formulario horizontal"},{"location":"componentes-grupos-de-botones.html","text":"Grupos de botones \u00b6 Podemos crear un grupo de botones en una l\u00ednea agrup\u00e1ndolos dentro de un elemento contenedor con la etiqueta .btn-group . 1 2 3 4 5 < div class = \"btn-group\" role = \"group\" aria-label = \"Basic example\" > < button type = \"button\" class = \"btn btn-secondary\" > Left </ button > < button type = \"button\" class = \"btn btn-secondary\" > Middle </ button > < button type = \"button\" class = \"btn btn-secondary\" > Right </ button > </ div > Con lo que obtendr\u00edamos el siguiente resultado: Los atributos \" role \" que utiliza Bootstrap provienen tambi\u00e9n de HTML 5 ARIA y sirven para indicar el rol o funci\u00f3n de un elemento, en este caso se indica la agrupaci\u00f3n de los botones. Mediante la librer\u00eda JavaScript de Bootstrap podemos a\u00f1adir comportamientos tipo checkbox o radio button a un grupo de botones, para que al pulsarlos se quede marcados. Para m\u00e1s informaci\u00f3n consultad la documentaci\u00f3n oficial. Barra de botones \u00b6 La barra de botones nos permite combinar grupos de botones para crear componentes m\u00e1s avanzados: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 < div class = \"btn-toolbar\" role = \"toolbar\" aria-label = \"Toolbar with button groups\" > < div class = \"btn-group mr-2\" role = \"group\" aria-label = \"First group\" > < button type = \"button\" class = \"btn btn-secondary\" > 1 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 2 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 3 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 4 </ button > </ div > < div class = \"btn-group mr-2\" role = \"group\" aria-label = \"Second group\" > < button type = \"button\" class = \"btn btn-secondary\" > 5 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 6 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 7 </ button > </ div > < div class = \"btn-group\" role = \"group\" aria-label = \"Third group\" > < button type = \"button\" class = \"btn btn-secondary\" > 8 </ button > </ div > </ div > Con lo que obtendr\u00edamos el siguiente resultado: Tama\u00f1os de los grupos de botones \u00b6 Los grupos de botones tambi\u00e9n nos permiten indicar el tama\u00f1o de los botones que contienen mediante las etiquetas .btn-group-* , donde \"*\" puede ser \" sm \" o \" lg \", por ejemplo: 1 2 3 < div class = \"btn-group btn-group-lg\" role = \"group\" aria-label = \"...\" > ... </ div > < div class = \"btn-group\" role = \"group\" aria-label = \"...\" > ... </ div > < div class = \"btn-group btn-group-sm\" role = \"group\" aria-label = \"...\" > ... </ div > Con lo que podr\u00edamos obtener grupos de botones de diferentes tama\u00f1os: Grupo de botones con desplegables \u00b6 Tambi\u00e9n es posible a\u00f1adir desplegables a los grupos de botones. Para esto el desplegable tendr\u00e1 que estar contenido a su vez dentro de otro grupo de botones, de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < div class = \"btn-group\" role = \"group\" aria-label = \"Button group with nested dropdown\" > < button type = \"button\" class = \"btn btn-secondary\" > 1 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 2 </ button > < div class = \"btn-group\" role = \"group\" > < button id = \"btnGroupDrop1\" type = \"button\" class = \"btn btn-secondary dropdown-toggle\" data-bs-toggle = \"dropdown\" aria-haspopup = \"true\" aria-expanded = \"false\" > Dropdown </ button > < div class = \"dropdown-menu\" aria-labelledby = \"btnGroupDrop1\" > < a class = \"dropdown-item\" href = \"#\" > Dropdown link </ a > < a class = \"dropdown-item\" href = \"#\" > Dropdown link </ a > </ div > </ div > </ div > El resultado visual obtenido ser\u00eda el siguiente: Como se puede observar en el c\u00f3digo de ejemplo anterior, la \u00fanica diferencia con un desplegable normal es que la etiqueta contenedora en vez de ser de tipo .dropdown es un .btn-group .","title":"Grupos de botones"},{"location":"componentes-grupos-de-botones.html#grupos-de-botones","text":"Podemos crear un grupo de botones en una l\u00ednea agrup\u00e1ndolos dentro de un elemento contenedor con la etiqueta .btn-group . 1 2 3 4 5 < div class = \"btn-group\" role = \"group\" aria-label = \"Basic example\" > < button type = \"button\" class = \"btn btn-secondary\" > Left </ button > < button type = \"button\" class = \"btn btn-secondary\" > Middle </ button > < button type = \"button\" class = \"btn btn-secondary\" > Right </ button > </ div > Con lo que obtendr\u00edamos el siguiente resultado: Los atributos \" role \" que utiliza Bootstrap provienen tambi\u00e9n de HTML 5 ARIA y sirven para indicar el rol o funci\u00f3n de un elemento, en este caso se indica la agrupaci\u00f3n de los botones. Mediante la librer\u00eda JavaScript de Bootstrap podemos a\u00f1adir comportamientos tipo checkbox o radio button a un grupo de botones, para que al pulsarlos se quede marcados. Para m\u00e1s informaci\u00f3n consultad la documentaci\u00f3n oficial.","title":"Grupos de botones"},{"location":"componentes-grupos-de-botones.html#barra-de-botones","text":"La barra de botones nos permite combinar grupos de botones para crear componentes m\u00e1s avanzados: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 < div class = \"btn-toolbar\" role = \"toolbar\" aria-label = \"Toolbar with button groups\" > < div class = \"btn-group mr-2\" role = \"group\" aria-label = \"First group\" > < button type = \"button\" class = \"btn btn-secondary\" > 1 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 2 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 3 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 4 </ button > </ div > < div class = \"btn-group mr-2\" role = \"group\" aria-label = \"Second group\" > < button type = \"button\" class = \"btn btn-secondary\" > 5 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 6 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 7 </ button > </ div > < div class = \"btn-group\" role = \"group\" aria-label = \"Third group\" > < button type = \"button\" class = \"btn btn-secondary\" > 8 </ button > </ div > </ div > Con lo que obtendr\u00edamos el siguiente resultado:","title":"Barra de botones"},{"location":"componentes-grupos-de-botones.html#tamanos-de-los-grupos-de-botones","text":"Los grupos de botones tambi\u00e9n nos permiten indicar el tama\u00f1o de los botones que contienen mediante las etiquetas .btn-group-* , donde \"*\" puede ser \" sm \" o \" lg \", por ejemplo: 1 2 3 < div class = \"btn-group btn-group-lg\" role = \"group\" aria-label = \"...\" > ... </ div > < div class = \"btn-group\" role = \"group\" aria-label = \"...\" > ... </ div > < div class = \"btn-group btn-group-sm\" role = \"group\" aria-label = \"...\" > ... </ div > Con lo que podr\u00edamos obtener grupos de botones de diferentes tama\u00f1os:","title":"Tama\u00f1os de los grupos de botones"},{"location":"componentes-grupos-de-botones.html#grupo-de-botones-con-desplegables","text":"Tambi\u00e9n es posible a\u00f1adir desplegables a los grupos de botones. Para esto el desplegable tendr\u00e1 que estar contenido a su vez dentro de otro grupo de botones, de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < div class = \"btn-group\" role = \"group\" aria-label = \"Button group with nested dropdown\" > < button type = \"button\" class = \"btn btn-secondary\" > 1 </ button > < button type = \"button\" class = \"btn btn-secondary\" > 2 </ button > < div class = \"btn-group\" role = \"group\" > < button id = \"btnGroupDrop1\" type = \"button\" class = \"btn btn-secondary dropdown-toggle\" data-bs-toggle = \"dropdown\" aria-haspopup = \"true\" aria-expanded = \"false\" > Dropdown </ button > < div class = \"dropdown-menu\" aria-labelledby = \"btnGroupDrop1\" > < a class = \"dropdown-item\" href = \"#\" > Dropdown link </ a > < a class = \"dropdown-item\" href = \"#\" > Dropdown link </ a > </ div > </ div > </ div > El resultado visual obtenido ser\u00eda el siguiente: Como se puede observar en el c\u00f3digo de ejemplo anterior, la \u00fanica diferencia con un desplegable normal es que la etiqueta contenedora en vez de ser de tipo .dropdown es un .btn-group .","title":"Grupo de botones con desplegables"},{"location":"componentes-navegacion.html","text":"Navegaci\u00f3n \u00b6 Los elementos de navegaci\u00f3n de Bootstrap comparten la etiqueta .nav para su marcado en la clase contenedora. Estos elementos necesitan la librer\u00eda JavaScript para su correcto funcionamiento. Algunos de los elementos de navegaci\u00f3n que podemos utilizar son las fichas o pesta\u00f1as y las \"p\u00edldoras\". Fichas o pesta\u00f1as \u00b6 Mediante la clase .nav-tabs podemos crear un grupo de pesta\u00f1as o fichas, para ello tenemos que seguir la siguiente estructura: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-tabs\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Es importante que nos fijemos en c\u00f3mo se usan las clases CSS .nav , .nav-tabs , .nav-item y .nav-link . Cada elemento del men\u00fa ser\u00e1 un .nav-item , los cuales contienen un enlace tipo .nav-link a la secci\u00f3n a mostrar. Para marcar el elemento del men\u00fa que est\u00e1 activo o seleccionado se utiliza la clase .active . Adem\u00e1s disponemos de la clase .disabled para deshabilitar elementos del men\u00fa. Si visualizamos el c\u00f3digo de ejemplo anterior obtendr\u00edamos un men\u00fa en forma de pesta\u00f1as como el siguiente: P\u00edldoras \u00b6 La clase .nav-pills se define de igual forma que la .nav-tab pero sus elementos adoptar\u00e1n una apariencia m\u00e1s similar a botones o \"p\u00edldoras\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-pills\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > En este caso el aspecto del men\u00fa ser\u00eda el siguiente: Tambi\u00e9n podemos crear un men\u00fa vertical o apilado a\u00f1adiendo la clase .flex-column a la etiqueta contenedora: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-pills flex-column\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Obteniendo: Ancho justificado \u00b6 Tambi\u00e9n podemos indicar que el ancho de las pesta\u00f1as o de las p\u00edldoras se distribuya equitativamente seg\u00fan el ancho disponible. Para esto simplemente tenemos que aplicar la clase .nav-fill a la etiqueta contenedora, de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-pills nav-fill\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Longer nav link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Con lo que obtendr\u00edamos: Este estilo no funcionar\u00e1 para pantallas con un ancho menor a 768px, que son las pantallas definidas como extra peque\u00f1as o de smartphone . Para estos tama\u00f1os cada elemento del men\u00fa ocupar\u00e1 el ancho justo que necesite. Elementos de navegaci\u00f3n con desplegables \u00b6 Tambi\u00e9n podemos a\u00f1adir elementos desplegables a nuestros men\u00fas de navegaci\u00f3n, tanto al de tipo tabs como al de p\u00edldoras. Para esto simplemente a\u00f1adiremos el dropdown como un elemento del men\u00fa m\u00e1s, usando la notaci\u00f3n que vimos en la secci\u00f3n \"Desplegables\", pero llevan cuidado de que para la etiqueta incicial (que en el dropdown normal era \" <div class=\"dropdown\"> \") se utilice el propio elemento \" .nav-item \" del men\u00fa, a\u00f1adiendo la clase \" .dropdown \" de la forma: \" <li class=\"nav-item dropdown\"> \". A continuaci\u00f3n se incluye un ejemplo completo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < ul class = \"nav nav-tabs\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item dropdown\" > < a class = \"nav-link dropdown-toggle\" data-bs-toggle = \"dropdown\" href = \"#\" role = \"button\" aria-haspopup = \"true\" aria-expanded = \"false\" > Dropdown </ a > < div class = \"dropdown-menu\" > < a class = \"dropdown-item\" href = \"#\" > Action </ a > < a class = \"dropdown-item\" href = \"#\" > Another action </ a > < a class = \"dropdown-item\" href = \"#\" > Something else here </ a > < div class = \"dropdown-divider\" ></ div > < a class = \"dropdown-item\" href = \"#\" > Separated link </ a > </ div > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Con lo que obtendr\u00edamos un resultado como el de la siguiente figura:","title":"Navegaci\u00f3n"},{"location":"componentes-navegacion.html#navegacion","text":"Los elementos de navegaci\u00f3n de Bootstrap comparten la etiqueta .nav para su marcado en la clase contenedora. Estos elementos necesitan la librer\u00eda JavaScript para su correcto funcionamiento. Algunos de los elementos de navegaci\u00f3n que podemos utilizar son las fichas o pesta\u00f1as y las \"p\u00edldoras\".","title":"Navegaci\u00f3n"},{"location":"componentes-navegacion.html#fichas-o-pestanas","text":"Mediante la clase .nav-tabs podemos crear un grupo de pesta\u00f1as o fichas, para ello tenemos que seguir la siguiente estructura: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-tabs\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Es importante que nos fijemos en c\u00f3mo se usan las clases CSS .nav , .nav-tabs , .nav-item y .nav-link . Cada elemento del men\u00fa ser\u00e1 un .nav-item , los cuales contienen un enlace tipo .nav-link a la secci\u00f3n a mostrar. Para marcar el elemento del men\u00fa que est\u00e1 activo o seleccionado se utiliza la clase .active . Adem\u00e1s disponemos de la clase .disabled para deshabilitar elementos del men\u00fa. Si visualizamos el c\u00f3digo de ejemplo anterior obtendr\u00edamos un men\u00fa en forma de pesta\u00f1as como el siguiente:","title":"Fichas o pesta\u00f1as"},{"location":"componentes-navegacion.html#pildoras","text":"La clase .nav-pills se define de igual forma que la .nav-tab pero sus elementos adoptar\u00e1n una apariencia m\u00e1s similar a botones o \"p\u00edldoras\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-pills\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > En este caso el aspecto del men\u00fa ser\u00eda el siguiente: Tambi\u00e9n podemos crear un men\u00fa vertical o apilado a\u00f1adiendo la clase .flex-column a la etiqueta contenedora: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-pills flex-column\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Obteniendo:","title":"P\u00edldoras"},{"location":"componentes-navegacion.html#ancho-justificado","text":"Tambi\u00e9n podemos indicar que el ancho de las pesta\u00f1as o de las p\u00edldoras se distribuya equitativamente seg\u00fan el ancho disponible. Para esto simplemente tenemos que aplicar la clase .nav-fill a la etiqueta contenedora, de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < ul class = \"nav nav-pills nav-fill\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Longer nav link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Con lo que obtendr\u00edamos: Este estilo no funcionar\u00e1 para pantallas con un ancho menor a 768px, que son las pantallas definidas como extra peque\u00f1as o de smartphone . Para estos tama\u00f1os cada elemento del men\u00fa ocupar\u00e1 el ancho justo que necesite.","title":"Ancho justificado"},{"location":"componentes-navegacion.html#elementos-de-navegacion-con-desplegables","text":"Tambi\u00e9n podemos a\u00f1adir elementos desplegables a nuestros men\u00fas de navegaci\u00f3n, tanto al de tipo tabs como al de p\u00edldoras. Para esto simplemente a\u00f1adiremos el dropdown como un elemento del men\u00fa m\u00e1s, usando la notaci\u00f3n que vimos en la secci\u00f3n \"Desplegables\", pero llevan cuidado de que para la etiqueta incicial (que en el dropdown normal era \" <div class=\"dropdown\"> \") se utilice el propio elemento \" .nav-item \" del men\u00fa, a\u00f1adiendo la clase \" .dropdown \" de la forma: \" <li class=\"nav-item dropdown\"> \". A continuaci\u00f3n se incluye un ejemplo completo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < ul class = \"nav nav-tabs\" > < li class = \"nav-item\" > < a class = \"nav-link active\" href = \"#\" > Active </ a > </ li > < li class = \"nav-item dropdown\" > < a class = \"nav-link dropdown-toggle\" data-bs-toggle = \"dropdown\" href = \"#\" role = \"button\" aria-haspopup = \"true\" aria-expanded = \"false\" > Dropdown </ a > < div class = \"dropdown-menu\" > < a class = \"dropdown-item\" href = \"#\" > Action </ a > < a class = \"dropdown-item\" href = \"#\" > Another action </ a > < a class = \"dropdown-item\" href = \"#\" > Something else here </ a > < div class = \"dropdown-divider\" ></ div > < a class = \"dropdown-item\" href = \"#\" > Separated link </ a > </ div > </ li > < li class = \"nav-item\" > < a class = \"nav-link\" href = \"#\" > Link </ a > </ li > < li class = \"nav-item\" > < a class = \"nav-link disabled\" href = \"#\" > Disabled </ a > </ li > </ ul > Con lo que obtendr\u00edamos un resultado como el de la siguiente figura:","title":"Elementos de navegaci\u00f3n con desplegables"},{"location":"componentes-responsive.html","text":"Componentes responsive \u00b6 Adem\u00e1s del sistema de rejilla Bootstrap incluye un completo conjunto de componentes para facilitarnos a\u00fan m\u00e1s el dise\u00f1o de una web responsive . Estos componentes aplican estilos a los elementos HTML existentes para crear un dise\u00f1o m\u00e1s moderno y adem\u00e1s adaptable a todos los dispositivos. Algunos de estos componentes son: Barras de navegaci\u00f3n Botones Formularios Tablas Desplegables y muchos m\u00e1s... A continuaci\u00f3n se explica el funcionamiento de los componentes m\u00e1s utilizados.","title":"Componentes Responsive"},{"location":"componentes-responsive.html#componentes-responsive","text":"Adem\u00e1s del sistema de rejilla Bootstrap incluye un completo conjunto de componentes para facilitarnos a\u00fan m\u00e1s el dise\u00f1o de una web responsive . Estos componentes aplican estilos a los elementos HTML existentes para crear un dise\u00f1o m\u00e1s moderno y adem\u00e1s adaptable a todos los dispositivos. Algunos de estos componentes son: Barras de navegaci\u00f3n Botones Formularios Tablas Desplegables y muchos m\u00e1s... A continuaci\u00f3n se explica el funcionamiento de los componentes m\u00e1s utilizados.","title":"Componentes responsive"},{"location":"componentes-tablas.html","text":"Tablas \u00b6 Bootstrap tambi\u00e9n define una serie de clases para aplicar estilos sobre las tablas de HTML. La m\u00e1s b\u00e1sica es la clase .table : 1 2 3 < table class = \"table\" > ... </ table > La cual configura los estilos de las tablas b\u00e1sicas de HTML para que adopten el siguiente aspecto: En la tabla anterior las celdas de la primera fila estar\u00edan marcadas con \"th\" y el resto de celdas con \"td\". Tablas peque\u00f1as \u00b6 Si queremos compactar el tama\u00f1o de la tabla para que deje un padding (o espaciado interior) inferior, podemos aplicar la clase .table-sm de la forma: 1 2 3 < table class = \"table table-sm\" > ... </ table > Obteniendo: Colores alternos \u00b6 Si adem\u00e1s aplicamos la clase .table-striped a nuestra tabla conseguiremos que las filas presenten colores alternos: 1 2 3 < table class = \"table table-striped\" > ... </ table > Con lo que obtendr\u00edamos una tabla con el siguiente aspecto: Tablas con bordes \u00b6 Tambi\u00e9n podemos dibujar un borde al rededor de la tabla a\u00f1adiendo la clase .table-bordered , de la forma: 1 2 3 < table class = \"table table-bordered\" > ... </ table > Obteniendo el siguiente resultado: Tablas Responsive \u00b6 Bootstrap proporciona una forma de crear tablas responsive que se basa en crear un scroll horizontal para que se vean correctamente. Para que esto funcione simplemente tenemos que a\u00f1adir la etiqueta .table-responsive a la propia tabla: 1 2 3 < table class = \"table table-responsive\" > ... </ table > Obteniendo: Este efecto se aplicar\u00e1 \u00fanicamente sobre dispositivos peque\u00f1os ( <576px ) mientras que en el resto de dispositivos no se notar\u00e1 la diferencia. Si queremos que el punto de ruptura a partir del cual se aplique el responsive sobre la tabla sea un tama\u00f1o mayor podemos indicar un sufijo de tama\u00f1o sobre esta etiqueta, de la forma .table-responsive-* , donde \" * \" podr\u00e1 ser sm , md , lg , xl o xxl .","title":"Tablas"},{"location":"componentes-tablas.html#tablas","text":"Bootstrap tambi\u00e9n define una serie de clases para aplicar estilos sobre las tablas de HTML. La m\u00e1s b\u00e1sica es la clase .table : 1 2 3 < table class = \"table\" > ... </ table > La cual configura los estilos de las tablas b\u00e1sicas de HTML para que adopten el siguiente aspecto: En la tabla anterior las celdas de la primera fila estar\u00edan marcadas con \"th\" y el resto de celdas con \"td\".","title":"Tablas"},{"location":"componentes-tablas.html#tablas-pequenas","text":"Si queremos compactar el tama\u00f1o de la tabla para que deje un padding (o espaciado interior) inferior, podemos aplicar la clase .table-sm de la forma: 1 2 3 < table class = \"table table-sm\" > ... </ table > Obteniendo:","title":"Tablas peque\u00f1as"},{"location":"componentes-tablas.html#colores-alternos","text":"Si adem\u00e1s aplicamos la clase .table-striped a nuestra tabla conseguiremos que las filas presenten colores alternos: 1 2 3 < table class = \"table table-striped\" > ... </ table > Con lo que obtendr\u00edamos una tabla con el siguiente aspecto:","title":"Colores alternos"},{"location":"componentes-tablas.html#tablas-con-bordes","text":"Tambi\u00e9n podemos dibujar un borde al rededor de la tabla a\u00f1adiendo la clase .table-bordered , de la forma: 1 2 3 < table class = \"table table-bordered\" > ... </ table > Obteniendo el siguiente resultado:","title":"Tablas con bordes"},{"location":"componentes-tablas.html#tablas-responsive","text":"Bootstrap proporciona una forma de crear tablas responsive que se basa en crear un scroll horizontal para que se vean correctamente. Para que esto funcione simplemente tenemos que a\u00f1adir la etiqueta .table-responsive a la propia tabla: 1 2 3 < table class = \"table table-responsive\" > ... </ table > Obteniendo: Este efecto se aplicar\u00e1 \u00fanicamente sobre dispositivos peque\u00f1os ( <576px ) mientras que en el resto de dispositivos no se notar\u00e1 la diferencia. Si queremos que el punto de ruptura a partir del cual se aplique el responsive sobre la tabla sea un tama\u00f1o mayor podemos indicar un sufijo de tama\u00f1o sobre esta etiqueta, de la forma .table-responsive-* , donde \" * \" podr\u00e1 ser sm , md , lg , xl o xxl .","title":"Tablas Responsive"},{"location":"ejercicios-1.html","text":"Ejercicios 1 \u00b6 Ejercicio 1 - Uso de la rejilla \u00b6 En este ejercicio vamos a practicar con la librer\u00eda Bootstrap y su sistema de rejilla. Partiremos de la plantilla para una p\u00e1gina web b\u00e1sica facilitada en la teor\u00eda, le a\u00f1adiremos un contenedor de tipo container e iremos a\u00f1adiendo filas y columnas intentando imitar el dise\u00f1o (y colores) del esquema de la siguiente figura: En el esquema se diferencia entre dos posibles tama\u00f1os de pantalla: tama\u00f1os peque\u00f1os (xs) y resto de tama\u00f1os (a partir del tama\u00f1o sm en adelante). Ten\u00e9is que aplicar las clases de Bootstrap necesarias para que al cambiar el tama\u00f1o de la pantalla se cambie la disposici\u00f3n de los bloques como se muestra en el esquema. Ejercicio 2 - Uso avanzado del sistema de rejilla \u00b6 En este ejercicio vamos a seguir practicando con la librer\u00eda Bootstrap y su sistema de rejilla. Para este ejercicio utilizaremos tambi\u00e9n la plantilla para una p\u00e1gina web b\u00e1sica, le a\u00f1adiremos un contenedor de tipo container e iremos a\u00f1adiendo filas y columnas intentando imitar el dise\u00f1o (y colores) del esquema de la siguiente figura: En este caso diferenciaremos entre tres disposiciones para la misma web, la de la izquierda se refiere a los tama\u00f1os grandes (lg, xl y xxl) y medianos (md), la disposici\u00f3n central al tama\u00f1o peque\u00f1o o de tablets (sm) y la de la derecha la correspondiente a m\u00f3viles (xs). Ten\u00e9is que aplicar las clases de Bootstrap necesarias para que al cambiar el tama\u00f1o de la pantalla se cambie la disposici\u00f3n de los bloques como se muestra en el esquema. Tened en cuenta que para este ejercicio es necesario utilizar el anidamiento de columnas. En la disposici\u00f3n para tama\u00f1os grandes, se puede ver como el bloque central de las columnas de color azul tiene un tama\u00f1o diferente. Esto se debe a que las 12 posibles columnas del sistema de rejilla de Bootstrap no es divisible por este n\u00famero de columnas. \u00bfC\u00f3mo podr\u00edamos hacer que las cinco columnas tengan el mismo tama\u00f1o?","title":"Ejercicios 1"},{"location":"ejercicios-1.html#ejercicios-1","text":"","title":"Ejercicios 1"},{"location":"ejercicios-1.html#ejercicio-1-uso-de-la-rejilla","text":"En este ejercicio vamos a practicar con la librer\u00eda Bootstrap y su sistema de rejilla. Partiremos de la plantilla para una p\u00e1gina web b\u00e1sica facilitada en la teor\u00eda, le a\u00f1adiremos un contenedor de tipo container e iremos a\u00f1adiendo filas y columnas intentando imitar el dise\u00f1o (y colores) del esquema de la siguiente figura: En el esquema se diferencia entre dos posibles tama\u00f1os de pantalla: tama\u00f1os peque\u00f1os (xs) y resto de tama\u00f1os (a partir del tama\u00f1o sm en adelante). Ten\u00e9is que aplicar las clases de Bootstrap necesarias para que al cambiar el tama\u00f1o de la pantalla se cambie la disposici\u00f3n de los bloques como se muestra en el esquema.","title":"Ejercicio 1 - Uso de la rejilla"},{"location":"ejercicios-1.html#ejercicio-2-uso-avanzado-del-sistema-de-rejilla","text":"En este ejercicio vamos a seguir practicando con la librer\u00eda Bootstrap y su sistema de rejilla. Para este ejercicio utilizaremos tambi\u00e9n la plantilla para una p\u00e1gina web b\u00e1sica, le a\u00f1adiremos un contenedor de tipo container e iremos a\u00f1adiendo filas y columnas intentando imitar el dise\u00f1o (y colores) del esquema de la siguiente figura: En este caso diferenciaremos entre tres disposiciones para la misma web, la de la izquierda se refiere a los tama\u00f1os grandes (lg, xl y xxl) y medianos (md), la disposici\u00f3n central al tama\u00f1o peque\u00f1o o de tablets (sm) y la de la derecha la correspondiente a m\u00f3viles (xs). Ten\u00e9is que aplicar las clases de Bootstrap necesarias para que al cambiar el tama\u00f1o de la pantalla se cambie la disposici\u00f3n de los bloques como se muestra en el esquema. Tened en cuenta que para este ejercicio es necesario utilizar el anidamiento de columnas. En la disposici\u00f3n para tama\u00f1os grandes, se puede ver como el bloque central de las columnas de color azul tiene un tama\u00f1o diferente. Esto se debe a que las 12 posibles columnas del sistema de rejilla de Bootstrap no es divisible por este n\u00famero de columnas. \u00bfC\u00f3mo podr\u00edamos hacer que las cinco columnas tengan el mismo tama\u00f1o?","title":"Ejercicio 2 - Uso avanzado del sistema de rejilla"},{"location":"ejercicios-2.html","text":"Ejercicios 2 \u00b6 Ejercicio 1 - Offset y ordenaci\u00f3n \u00b6 En este ejercicio vamos a practicar con algunas caracter\u00edsticas m\u00e1s de Bootstrap: la posibilidad de a\u00f1adir un offset (o espacio inicial a las columnas), el cambio de orden de los elementos de una fila y la visibilidad de las columnas seg\u00fan el tama\u00f1o del dispositivo. Para ello nos crearemos una nueva p\u00e1gina web partiendo de la plantilla b\u00e1sica, le a\u00f1adiremos un contendor de tipo container e iremos a\u00f1adiendo filas y columnas intentando imitar el dise\u00f1o, colores y contenidos del esquema de la siguiente figura: Tened en cuenta que: La segunda fila (que contiene 4 columnas con los n\u00fameros 1, 2, 3 y 4) es solamente una fila a la que se le han a\u00f1adido offsets . Para forzar el cambio de fila se puede a\u00f1adir un elemento entre la 2\u00aa y la 3\u00aa columna que solo sea visible cuando la pantalla sea mediana o grande (md, lg, xl o xxl) y que aplique la clase .w-100 de Bootstrap. El orden de la tercera fila (con las letras a, b, c, d) se ha alterado para las disposiciones de pantalla grandes (md, lg, xl y xxl) usando las clases de bootstrap order-* . En la 5\u00aa fila naranja se ha aplicado un cambio de orden y un offset para las pantallas grandes y medianas (md, lg, xl y xxl). Adem\u00e1s, cuando la pantalla sea de tipo xs se deber\u00e1 de ocultar una de sus columnas. La fila azul claro en la que pone Desktop (para pantallas md, lg, xl y xxl), Tablet (para sm) y Mobile (cuando la pantalla es xs) en realidad son 3 filas distintas con clases para que solo se muestren en dichos tama\u00f1os de pantalla. La \u00faltima fila ( Footer ) se deber\u00e1 de ocultar solamente cuando la pantalla sea del tipo xs . Ejercicio 2 - Personalizando mediante media query \u00b6 En este ejercicio se pide que cre\u00e9is una nueva p\u00e1gina web usando la librer\u00eda Bootstrap. El contenido aparecer\u00e1 centrado en la pantalla y constar\u00e1 de tres filas con el siguiente contenido y disposici\u00f3n, cuando la pantalla sea de tama\u00f1o medio (md) y grande (lg, xl y xxl): Una fila en la parte superior con una \u00fanica columna con fondo verde que ocupar\u00e1 todo el ancho, en dicha columna aparecer\u00e1 el texto \" Header \" alineado a la izquierda y en grande. Una segunda fila con tres columnas en color rojo con el mismo ancho y con los n\u00fameros 1, 2 y 3 (respectivamente) centrados y en letras grandes. La tercera y \u00faltima fila contendr\u00e1 dos columnas de igual ancho y en color amarillo, la primera columna tendr\u00e1 el texto \" footer 1 \" alineado a la derecha y la segunda el texto \" footer 2 \" alineado a la izquierda (ambos usando un tama\u00f1o de fuente grande). En la siguiente imagen se puede ver un esquema de la web a realizar: Como se puede ver en el esquema de la imagen, la disposici\u00f3n de las columnas y la alineaci\u00f3n de los textos variar\u00e1 dependiendo del tama\u00f1o de la pantalla. Ten\u00e9is que reproducir este comportamiento para que la apariencia de la web sea similar al esquema (n\u00famero de columnas, alineaciones de los textos y colores) cuando el tama\u00f1o de la pantalla sea la de un tablet (sm) o la de un tel\u00e9fono (xs). Tened en cuenta que: Siempre que sea posible se utilizar\u00e1n las clases que provee Bootstrap. Cuando no sea posible (por ejemplo para controlar la alineaci\u00f3n de los textos y el cambio de color del fondo) tendr\u00e9is que definir una media query que lo haga.","title":"Ejercicios 2"},{"location":"ejercicios-2.html#ejercicios-2","text":"","title":"Ejercicios 2"},{"location":"ejercicios-2.html#ejercicio-1-offset-y-ordenacion","text":"En este ejercicio vamos a practicar con algunas caracter\u00edsticas m\u00e1s de Bootstrap: la posibilidad de a\u00f1adir un offset (o espacio inicial a las columnas), el cambio de orden de los elementos de una fila y la visibilidad de las columnas seg\u00fan el tama\u00f1o del dispositivo. Para ello nos crearemos una nueva p\u00e1gina web partiendo de la plantilla b\u00e1sica, le a\u00f1adiremos un contendor de tipo container e iremos a\u00f1adiendo filas y columnas intentando imitar el dise\u00f1o, colores y contenidos del esquema de la siguiente figura: Tened en cuenta que: La segunda fila (que contiene 4 columnas con los n\u00fameros 1, 2, 3 y 4) es solamente una fila a la que se le han a\u00f1adido offsets . Para forzar el cambio de fila se puede a\u00f1adir un elemento entre la 2\u00aa y la 3\u00aa columna que solo sea visible cuando la pantalla sea mediana o grande (md, lg, xl o xxl) y que aplique la clase .w-100 de Bootstrap. El orden de la tercera fila (con las letras a, b, c, d) se ha alterado para las disposiciones de pantalla grandes (md, lg, xl y xxl) usando las clases de bootstrap order-* . En la 5\u00aa fila naranja se ha aplicado un cambio de orden y un offset para las pantallas grandes y medianas (md, lg, xl y xxl). Adem\u00e1s, cuando la pantalla sea de tipo xs se deber\u00e1 de ocultar una de sus columnas. La fila azul claro en la que pone Desktop (para pantallas md, lg, xl y xxl), Tablet (para sm) y Mobile (cuando la pantalla es xs) en realidad son 3 filas distintas con clases para que solo se muestren en dichos tama\u00f1os de pantalla. La \u00faltima fila ( Footer ) se deber\u00e1 de ocultar solamente cuando la pantalla sea del tipo xs .","title":"Ejercicio 1 - Offset y ordenaci\u00f3n"},{"location":"ejercicios-2.html#ejercicio-2-personalizando-mediante-media-query","text":"En este ejercicio se pide que cre\u00e9is una nueva p\u00e1gina web usando la librer\u00eda Bootstrap. El contenido aparecer\u00e1 centrado en la pantalla y constar\u00e1 de tres filas con el siguiente contenido y disposici\u00f3n, cuando la pantalla sea de tama\u00f1o medio (md) y grande (lg, xl y xxl): Una fila en la parte superior con una \u00fanica columna con fondo verde que ocupar\u00e1 todo el ancho, en dicha columna aparecer\u00e1 el texto \" Header \" alineado a la izquierda y en grande. Una segunda fila con tres columnas en color rojo con el mismo ancho y con los n\u00fameros 1, 2 y 3 (respectivamente) centrados y en letras grandes. La tercera y \u00faltima fila contendr\u00e1 dos columnas de igual ancho y en color amarillo, la primera columna tendr\u00e1 el texto \" footer 1 \" alineado a la derecha y la segunda el texto \" footer 2 \" alineado a la izquierda (ambos usando un tama\u00f1o de fuente grande). En la siguiente imagen se puede ver un esquema de la web a realizar: Como se puede ver en el esquema de la imagen, la disposici\u00f3n de las columnas y la alineaci\u00f3n de los textos variar\u00e1 dependiendo del tama\u00f1o de la pantalla. Ten\u00e9is que reproducir este comportamiento para que la apariencia de la web sea similar al esquema (n\u00famero de columnas, alineaciones de los textos y colores) cuando el tama\u00f1o de la pantalla sea la de un tablet (sm) o la de un tel\u00e9fono (xs). Tened en cuenta que: Siempre que sea posible se utilizar\u00e1n las clases que provee Bootstrap. Cuando no sea posible (por ejemplo para controlar la alineaci\u00f3n de los textos y el cambio de color del fondo) tendr\u00e9is que definir una media query que lo haga.","title":"Ejercicio 2 - Personalizando mediante media query"},{"location":"ejercicios-3.html","text":"Ejercicios 3 \u00b6 Ejercicio 1 - Maquetaci\u00f3n de componentes \u00b6 Para practicar con los componentes de Bootstrap y su integraci\u00f3n en el sistema de rejilla se propone la realizaci\u00f3n de un nuevo sitio web con el siguiente aspecto: Esta web est\u00e1 dividida en tres zonas: cabecera, zona de contenido y pie de p\u00e1gina. En la zona de contenido se incluye 5 tarjetas (cards) con el mismo dise\u00f1o. Como se puede ver en el dise\u00f1o superior, el n\u00famero de tarjetas por fila cambiar\u00e1 dependiendo del tama\u00f1o de la pantalla. Adem\u00e1s, al pulsar sobre el bot\u00f3n de las tarjetas (todas tendr\u00e1n el mismo enlace), se abrir\u00e1 la siguiente p\u00e1gina: Esta p\u00e1gina tendr\u00e1 un \u00fanico dise\u00f1o: barra superior, zona de contenido y pie de pa\u01f5ina. En este caso en la barra superior se a\u00f1adir\u00e1 un bot\u00f3n para volver a la p\u00e1gina anterior. En la zona de contenido tendremos un t\u00edtulo, dos p\u00e1rrafos con texto de ejemplo, una imagen y dos botones (en la misma fila). El primer bot\u00f3n nos permitir\u00e1 volver a la p\u00e1gina anterior y el segundo mostrar\u00e1 una lista de acciones. Este segundo bot\u00f3n lo podemos implementar mediante un Dropdown que muestre las opciones: \"Guardar favorito\", \"Exportar a PDF\", \"Imprimir\" y \"Compartir\".","title":"Ejercicios 3"},{"location":"ejercicios-3.html#ejercicios-3","text":"","title":"Ejercicios 3"},{"location":"ejercicios-3.html#ejercicio-1-maquetacion-de-componentes","text":"Para practicar con los componentes de Bootstrap y su integraci\u00f3n en el sistema de rejilla se propone la realizaci\u00f3n de un nuevo sitio web con el siguiente aspecto: Esta web est\u00e1 dividida en tres zonas: cabecera, zona de contenido y pie de p\u00e1gina. En la zona de contenido se incluye 5 tarjetas (cards) con el mismo dise\u00f1o. Como se puede ver en el dise\u00f1o superior, el n\u00famero de tarjetas por fila cambiar\u00e1 dependiendo del tama\u00f1o de la pantalla. Adem\u00e1s, al pulsar sobre el bot\u00f3n de las tarjetas (todas tendr\u00e1n el mismo enlace), se abrir\u00e1 la siguiente p\u00e1gina: Esta p\u00e1gina tendr\u00e1 un \u00fanico dise\u00f1o: barra superior, zona de contenido y pie de pa\u01f5ina. En este caso en la barra superior se a\u00f1adir\u00e1 un bot\u00f3n para volver a la p\u00e1gina anterior. En la zona de contenido tendremos un t\u00edtulo, dos p\u00e1rrafos con texto de ejemplo, una imagen y dos botones (en la misma fila). El primer bot\u00f3n nos permitir\u00e1 volver a la p\u00e1gina anterior y el segundo mostrar\u00e1 una lista de acciones. Este segundo bot\u00f3n lo podemos implementar mediante un Dropdown que muestre las opciones: \"Guardar favorito\", \"Exportar a PDF\", \"Imprimir\" y \"Compartir\".","title":"Ejercicio 1 - Maquetaci\u00f3n de componentes"},{"location":"ejercicios-4.html","text":"Ejercicios 4 \u00b6 Ejercicio 1 - Crear una Web responsive \u00b6 Para poner en pr\u00e1ctica los conceptos te\u00f3ricos sobre dise\u00f1o responsive , se propone como ejercicio la creaci\u00f3n de un peque\u00f1o sitio Web est\u00e1tico que use los estilos y componentes de Bootstrap. La tem\u00e1tica, contenidos y estilos del sitio son libres, pero deber\u00e1 tener al menos las siguientes caracter\u00edsticas: El sitio estar\u00e1 formado por al menos 3 p\u00e1ginas enlazadas entre s\u00ed (con contenidos est\u00e1ticos). Ser completamente responsive , de forma que se adapte tanto a pantallas extra peque\u00f1as de smartphone como a tablets y pantallas m\u00e1s grandes de port\u00e1tiles y de escritorio. Tener una barra de navegaci\u00f3n principal que se contraiga cuando la pantalla sea peque\u00f1a. Esta barra tendr\u00e1 al menos: Dos enlaces. Una imagen como logotipo. Un buscador (aunque no sea funcional). Un carousel en la p\u00e1gina principal con tres im\u00e1genes. Modifica el intervalo para que las im\u00e1genes se muestren durante 3000 ms. Contener los siguientes elementos (un ejemplo de cada uno en alguna de las p\u00e1ginas del sitio web): Iconos con FontAwesome. Botones. Un desplegable. Una secci\u00f3n con fichas o pesta\u00f1as. Un formulario horizontal. Una tabla responsive con bordes y de tipo striped . El estilo base a utilizar ser\u00e1 el que define Bootstrap, si se definen estilos CSS personalizados tendr\u00e1n que estar en un fichero separado, llamado \"custom.css\", y que ser\u00e1 com\u00fan para todas las p\u00e1ginas del sitio. Un posible ejemplo de una web que pod\u00e9is realizar ser\u00eda, por ejemplo, una web de recetas. Esta podr\u00eda tener una p\u00e1gina principal con la informaci\u00f3n m\u00e1s importante, una p\u00e1gina con una receta de ejemplo (aqu\u00ed se podr\u00edan utilizar las fichas o pesta\u00f1as para cambiar entre elaboraci\u00f3n e ingredientes, los cuales podr\u00edan estar en una tabla) y otra p\u00e1gina para el env\u00edo de recetas (con un formulario horizontal, botones para env\u00edar y cancelar, y un desplegable para elegir la categor\u00eda). De forma similar se podr\u00eda crear la web sobre coches u otro tipo de veh\u00edculos, mascotas, bicicletas, etc. Al ser una web est\u00e1tica tendr\u00e9is que repetir partes del c\u00f3digo en todas las p\u00e1ginas, por ejemplo la barra de men\u00fa principal tendr\u00e1 que ser igual en todas las p\u00e1ginas. Por este motivo se recomienda realizar primero estas partes, y una vez probadas, copiar y pegar el c\u00f3digo en el resto de p\u00e1ginas.","title":"Ejercicios 4"},{"location":"ejercicios-4.html#ejercicios-4","text":"","title":"Ejercicios 4"},{"location":"ejercicios-4.html#ejercicio-1-crear-una-web-responsive","text":"Para poner en pr\u00e1ctica los conceptos te\u00f3ricos sobre dise\u00f1o responsive , se propone como ejercicio la creaci\u00f3n de un peque\u00f1o sitio Web est\u00e1tico que use los estilos y componentes de Bootstrap. La tem\u00e1tica, contenidos y estilos del sitio son libres, pero deber\u00e1 tener al menos las siguientes caracter\u00edsticas: El sitio estar\u00e1 formado por al menos 3 p\u00e1ginas enlazadas entre s\u00ed (con contenidos est\u00e1ticos). Ser completamente responsive , de forma que se adapte tanto a pantallas extra peque\u00f1as de smartphone como a tablets y pantallas m\u00e1s grandes de port\u00e1tiles y de escritorio. Tener una barra de navegaci\u00f3n principal que se contraiga cuando la pantalla sea peque\u00f1a. Esta barra tendr\u00e1 al menos: Dos enlaces. Una imagen como logotipo. Un buscador (aunque no sea funcional). Un carousel en la p\u00e1gina principal con tres im\u00e1genes. Modifica el intervalo para que las im\u00e1genes se muestren durante 3000 ms. Contener los siguientes elementos (un ejemplo de cada uno en alguna de las p\u00e1ginas del sitio web): Iconos con FontAwesome. Botones. Un desplegable. Una secci\u00f3n con fichas o pesta\u00f1as. Un formulario horizontal. Una tabla responsive con bordes y de tipo striped . El estilo base a utilizar ser\u00e1 el que define Bootstrap, si se definen estilos CSS personalizados tendr\u00e1n que estar en un fichero separado, llamado \"custom.css\", y que ser\u00e1 com\u00fan para todas las p\u00e1ginas del sitio. Un posible ejemplo de una web que pod\u00e9is realizar ser\u00eda, por ejemplo, una web de recetas. Esta podr\u00eda tener una p\u00e1gina principal con la informaci\u00f3n m\u00e1s importante, una p\u00e1gina con una receta de ejemplo (aqu\u00ed se podr\u00edan utilizar las fichas o pesta\u00f1as para cambiar entre elaboraci\u00f3n e ingredientes, los cuales podr\u00edan estar en una tabla) y otra p\u00e1gina para el env\u00edo de recetas (con un formulario horizontal, botones para env\u00edar y cancelar, y un desplegable para elegir la categor\u00eda). De forma similar se podr\u00eda crear la web sobre coches u otro tipo de veh\u00edculos, mascotas, bicicletas, etc. Al ser una web est\u00e1tica tendr\u00e9is que repetir partes del c\u00f3digo en todas las p\u00e1ginas, por ejemplo la barra de men\u00fa principal tendr\u00e1 que ser igual en todas las p\u00e1ginas. Por este motivo se recomienda realizar primero estas partes, y una vez probadas, copiar y pegar el c\u00f3digo en el resto de p\u00e1ginas.","title":"Ejercicio 1 - Crear una Web responsive"},{"location":"introduccion-frameworks.html","text":"Frameworks responsive \u00b6 Como se suele decir, en vez de reinventar la rueda y programar nosotros todo el dise\u00f1o responsive , podemos aprovechar algunos de los frameworks que existen en el mercado para este prop\u00f3sito. Nos ahorrar\u00e1n much\u00edsimo tiempo, partiremos de c\u00f3digo ampliamente probado, y de unos dise\u00f1os base de todos los elementos web bastante m\u00e1s bonitos que la que tendr\u00edan de forma nativa. Actualmente existen en el mercado una amplia variedad de este tipo frameworks responsive , algunos de los m\u00e1s utilizados son: Bootstrap ( http://getbootstrap.com/ ): Este framework es uno de los m\u00e1s populares del mercado, habiendo sido desarrollado por el equipo de Twitter. Bootstrap ha sido creado pensando en ofrecer la mejor experiencia de usuario tanto a usuarios de PC (IE7 incluido!), como a smartphones y tabletas. Utiliza un grid responsive de 12 columnas y trae integrado decenas de complementos, plugins de JavaScript, tipograf\u00eda, controladores de formularios y mucho m\u00e1s. Adem\u00e1s utiliza el preprocesador de CSS LESS. Foundation ( http://foundation.zurb.com/ ): Junto con Bootstrap es uno de los frameworks m\u00e1s avanzados que existen en la actualidad. Ha sido desarrollado con SASS, un potente preprocesador de CSS que hace de Foundation un framework f\u00e1cilmente personalizable. Adem\u00e1s saca partido de las nuevas tecnolog\u00edas y funciona con IE8+. Skeleton ( http://getskeleton.com/ ): Skeleton es un boilerplate que ofrece un grid responsive basado en una resoluci\u00f3n de 960px que se ajusta al tama\u00f1o de los dispositivos m\u00f3viles. Tiene poco peso e incluye una colecci\u00f3n de archivos CSS y JS para facilitarnos el dise\u00f1o de nuestra web. HTML5 Boilerplate ( http://html5boilerplate.com/ ): Al igual que los dem\u00e1s nos ofrece un set de utilidades para construir nuestra web responsive de forma r\u00e1pida y sencilla, con la ventaja de ser uno de los que menos ocupan. En este curso nos vamos a centrar en Bootstrap por ser uno de los frameworks m\u00e1s completos, m\u00e1s utilizados y que mejor funcionan. En las siguientes secciones estudiaremos en detalle el funcionamiento de esta librer\u00eda. Bootstrap \u00b6 Como ya hemos comentado antes, Bootstrap es uno de los frameworks m\u00e1s populares y utilizados del mercado para la creaci\u00f3n de p\u00e1ginas responsive , habiendo sido desarrollado por el equipo de Twitter. Entre los navegadores soportados se encuentran Chrome, Firefox, Opera, Safari e Internet Explorer a partir de la versi\u00f3n 8 (aunque en la versi\u00f3n 7 tambi\u00e9n funciona correctamente). Est\u00e1 preparado para funcionar tanto en navegadores de PCs y port\u00e1tiles con cualquier tama\u00f1o de pantalla as\u00ed como para tablets y smartphones de tama\u00f1os mucho m\u00e1s reducidos. Para conseguir que una misma web se pueda visualizar correctamente en todos esos tama\u00f1os de pantalla ha dise\u00f1ado un avanzado sistema de rejilla dividido en columnas para el posicionamiento de los elementos de nuestra web. Adem\u00e1s incorpora otras muchas utilidades y complementos (formularios, botones, barras de navegaci\u00f3n, etc.) para simplificar el desarrollo de una web responsive .","title":"Frameworks responsive"},{"location":"introduccion-frameworks.html#frameworks-responsive","text":"Como se suele decir, en vez de reinventar la rueda y programar nosotros todo el dise\u00f1o responsive , podemos aprovechar algunos de los frameworks que existen en el mercado para este prop\u00f3sito. Nos ahorrar\u00e1n much\u00edsimo tiempo, partiremos de c\u00f3digo ampliamente probado, y de unos dise\u00f1os base de todos los elementos web bastante m\u00e1s bonitos que la que tendr\u00edan de forma nativa. Actualmente existen en el mercado una amplia variedad de este tipo frameworks responsive , algunos de los m\u00e1s utilizados son: Bootstrap ( http://getbootstrap.com/ ): Este framework es uno de los m\u00e1s populares del mercado, habiendo sido desarrollado por el equipo de Twitter. Bootstrap ha sido creado pensando en ofrecer la mejor experiencia de usuario tanto a usuarios de PC (IE7 incluido!), como a smartphones y tabletas. Utiliza un grid responsive de 12 columnas y trae integrado decenas de complementos, plugins de JavaScript, tipograf\u00eda, controladores de formularios y mucho m\u00e1s. Adem\u00e1s utiliza el preprocesador de CSS LESS. Foundation ( http://foundation.zurb.com/ ): Junto con Bootstrap es uno de los frameworks m\u00e1s avanzados que existen en la actualidad. Ha sido desarrollado con SASS, un potente preprocesador de CSS que hace de Foundation un framework f\u00e1cilmente personalizable. Adem\u00e1s saca partido de las nuevas tecnolog\u00edas y funciona con IE8+. Skeleton ( http://getskeleton.com/ ): Skeleton es un boilerplate que ofrece un grid responsive basado en una resoluci\u00f3n de 960px que se ajusta al tama\u00f1o de los dispositivos m\u00f3viles. Tiene poco peso e incluye una colecci\u00f3n de archivos CSS y JS para facilitarnos el dise\u00f1o de nuestra web. HTML5 Boilerplate ( http://html5boilerplate.com/ ): Al igual que los dem\u00e1s nos ofrece un set de utilidades para construir nuestra web responsive de forma r\u00e1pida y sencilla, con la ventaja de ser uno de los que menos ocupan. En este curso nos vamos a centrar en Bootstrap por ser uno de los frameworks m\u00e1s completos, m\u00e1s utilizados y que mejor funcionan. En las siguientes secciones estudiaremos en detalle el funcionamiento de esta librer\u00eda.","title":"Frameworks responsive"},{"location":"introduccion-frameworks.html#bootstrap","text":"Como ya hemos comentado antes, Bootstrap es uno de los frameworks m\u00e1s populares y utilizados del mercado para la creaci\u00f3n de p\u00e1ginas responsive , habiendo sido desarrollado por el equipo de Twitter. Entre los navegadores soportados se encuentran Chrome, Firefox, Opera, Safari e Internet Explorer a partir de la versi\u00f3n 8 (aunque en la versi\u00f3n 7 tambi\u00e9n funciona correctamente). Est\u00e1 preparado para funcionar tanto en navegadores de PCs y port\u00e1tiles con cualquier tama\u00f1o de pantalla as\u00ed como para tablets y smartphones de tama\u00f1os mucho m\u00e1s reducidos. Para conseguir que una misma web se pueda visualizar correctamente en todos esos tama\u00f1os de pantalla ha dise\u00f1ado un avanzado sistema de rejilla dividido en columnas para el posicionamiento de los elementos de nuestra web. Adem\u00e1s incorpora otras muchas utilidades y complementos (formularios, botones, barras de navegaci\u00f3n, etc.) para simplificar el desarrollo de una web responsive .","title":"Bootstrap"},{"location":"introduccion-funcionamiento.html","text":"Funcionamiento del dise\u00f1o adaptable \u00b6 El dise\u00f1o responsive se basa en adaptar din\u00e1micamente el dise\u00f1o web en funci\u00f3n de la resoluci\u00f3n de la pantalla del visitante. De esta forma adaptamos nuestras webs a dispositivos m\u00f3viles sin necesidad de tener dos sitios separados y al mismo tiempo tambi\u00e9n podemos adaptar la web a resoluciones grandes para mejorar la experiencia de usuario. Antiguamente se pensaba en hacer 2 dise\u00f1os, uno para m\u00f3viles y otro para web, sin embargo, el dise\u00f1o responsive trata de estructurar o adaptar el contenido que ya tienes en el dise\u00f1o original a otros formatos diferentes: m\u00f3viles, tablets y versi\u00f3n de escritorio, como bien muestra esta imagen: La soluci\u00f3n t\u00e9cnica que se le ha dado en el desarrollo web al problema de esta diversidad de resoluciones web se llama Responsive Web Design y nos permite hacer interfaces adaptadas al entorno del usuario mediante estructuras, bloques, columnas e im\u00e1genes fluidas gracias a media-queries de CSS. A partir de CSS 2.1 las hojas de estilo han incluido los media types , lo cual nos ha facilitado, por ejemplo, proveer un estilo distinto para el dise\u00f1o de impresi\u00f3n: 1 2 < link rel = \"stylesheet\" type = \"text/css\" href = \"core.css\" media = \"screen\" /> < link rel = \"stylesheet\" type = \"text/css\" href = \"print.css\" media = \"print\" /> A partir de CSS 3 el W3C cre\u00f3 las media queries . Una media query nos permite apuntar no s\u00f3lo a ciertas clases de dispositivos, sino realmente inspeccionar las caracter\u00edsticas f\u00edsicas del dispositivo que est\u00e1 renderizando nuestro trabajo. Para utilizarlas podemos incorporar una query al atributo media de un link a una hoja de estilos: 1 2 < link rel = \"stylesheet\" type = \"text/css\" href = \"shetland.css\" media = \"screen and (max-device-width: 480px)\" /> La query contiene dos componentes: Un media type ( screen , print o all ). La consulta entre par\u00e9ntesis, conteniendo una caracter\u00edstica a inspeccionar (max-device-width o min-device-width) seguida por el valor al que apuntamos (480px). Tambi\u00e9n es posible utilizarlas directamente en el CSS como parte de una regla @media : 1 2 3 4 5 @media screen and (max-device-width: 480px) { .column { float: none; } } Por ejemplo, si quisi\u00e9ramos crear un estilo de bloques fluidos que para pantallas grandes se muestre uno a continuaci\u00f3n del otro y para pantallas pantallas cambie a mostrarse de forma apilada, uno encima de otro, podr\u00edamos hacer algo como: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @media all and (max-width: 800px) { .bloque{ display: block !important; /* Cuando el ancho sea inferior a 800px el elemento ser\u00e1 un bloque */ width: auto !important; } } .bloque { display: inline-block; /* Para que se muestren los bloques en l\u00ednea */ height:300px; width: 300px; border:1px solid #333; background: #999; margin:20px; } Para m\u00e1s informaci\u00f3n pod\u00e9is consultar: http://www.w3.org/TR/css3-mediaqueries/","title":"Funcionamiento del dise\u00f1o adaptable"},{"location":"introduccion-funcionamiento.html#funcionamiento-del-diseno-adaptable","text":"El dise\u00f1o responsive se basa en adaptar din\u00e1micamente el dise\u00f1o web en funci\u00f3n de la resoluci\u00f3n de la pantalla del visitante. De esta forma adaptamos nuestras webs a dispositivos m\u00f3viles sin necesidad de tener dos sitios separados y al mismo tiempo tambi\u00e9n podemos adaptar la web a resoluciones grandes para mejorar la experiencia de usuario. Antiguamente se pensaba en hacer 2 dise\u00f1os, uno para m\u00f3viles y otro para web, sin embargo, el dise\u00f1o responsive trata de estructurar o adaptar el contenido que ya tienes en el dise\u00f1o original a otros formatos diferentes: m\u00f3viles, tablets y versi\u00f3n de escritorio, como bien muestra esta imagen: La soluci\u00f3n t\u00e9cnica que se le ha dado en el desarrollo web al problema de esta diversidad de resoluciones web se llama Responsive Web Design y nos permite hacer interfaces adaptadas al entorno del usuario mediante estructuras, bloques, columnas e im\u00e1genes fluidas gracias a media-queries de CSS. A partir de CSS 2.1 las hojas de estilo han incluido los media types , lo cual nos ha facilitado, por ejemplo, proveer un estilo distinto para el dise\u00f1o de impresi\u00f3n: 1 2 < link rel = \"stylesheet\" type = \"text/css\" href = \"core.css\" media = \"screen\" /> < link rel = \"stylesheet\" type = \"text/css\" href = \"print.css\" media = \"print\" /> A partir de CSS 3 el W3C cre\u00f3 las media queries . Una media query nos permite apuntar no s\u00f3lo a ciertas clases de dispositivos, sino realmente inspeccionar las caracter\u00edsticas f\u00edsicas del dispositivo que est\u00e1 renderizando nuestro trabajo. Para utilizarlas podemos incorporar una query al atributo media de un link a una hoja de estilos: 1 2 < link rel = \"stylesheet\" type = \"text/css\" href = \"shetland.css\" media = \"screen and (max-device-width: 480px)\" /> La query contiene dos componentes: Un media type ( screen , print o all ). La consulta entre par\u00e9ntesis, conteniendo una caracter\u00edstica a inspeccionar (max-device-width o min-device-width) seguida por el valor al que apuntamos (480px). Tambi\u00e9n es posible utilizarlas directamente en el CSS como parte de una regla @media : 1 2 3 4 5 @media screen and (max-device-width: 480px) { .column { float: none; } } Por ejemplo, si quisi\u00e9ramos crear un estilo de bloques fluidos que para pantallas grandes se muestre uno a continuaci\u00f3n del otro y para pantallas pantallas cambie a mostrarse de forma apilada, uno encima de otro, podr\u00edamos hacer algo como: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @media all and (max-width: 800px) { .bloque{ display: block !important; /* Cuando el ancho sea inferior a 800px el elemento ser\u00e1 un bloque */ width: auto !important; } } .bloque { display: inline-block; /* Para que se muestren los bloques en l\u00ednea */ height:300px; width: 300px; border:1px solid #333; background: #999; margin:20px; } Para m\u00e1s informaci\u00f3n pod\u00e9is consultar: http://www.w3.org/TR/css3-mediaqueries/","title":"Funcionamiento del dise\u00f1o adaptable"},{"location":"introduccion-pruebas.html","text":"Probando el responsive \u00b6 Para probar nuestros dise\u00f1os responsive tenemos varias opciones, una de ellas es usar algunas de las webs que existen para tal fin. Como por ejemplo: Responsinator ( http://www.responsinator.com ) Esta herramienta est\u00e1 disponible solamente de forma online , pero nos permite ver de un solo vistazo como se mostrar\u00eda nuestra web con el tama\u00f1o de los smarthones y tablets m\u00e1s populares, como por ejemplo las diferentes versiones de iPhone, iPad, Kindle y algunas versiones de tel\u00e9fonos Android. El problema de estas herramientas es que tenemos que acceder a una versi\u00f3n publicada de nuestra web (no permiten localhost) y son un poco m\u00e1s lentas para realizar pruebas continuas, por esta raz\u00f3n es mucho m\u00e1s recomendable utilizar alguno de los kits de herramientas para el desarrollador web que existen para los diferentes navegadores. Herramientas del navegador para el desarrollador \u00b6 Tanto en Firefox como Chrome viene instalado por defecto una serie de herramientas de ayuda para el desarrollador que nos permiten, entre otras cosas, ver la consola de mensajes, inspeccionar el c\u00f3digo o ver la secuencia de llamadas al servidor. Adem\u00e1s de estas tambi\u00e9n existen otras herramientas m\u00e1s avanzadas que podemos instalar como una extensi\u00f3n de nuestro navegador, como por ejemplo Firebug. La ventaja de estas herramientas frente a las anteriores es que son muchos m\u00e1s r\u00e1pidas, nos permiten probar nuestra p\u00e1gina en local y adem\u00e1s podemos inspeccionar el c\u00f3digo y modificar los estilos en tiempo real. Usando el inspector de estas herramientas nos podemos ahorrar mucho tiempo a la hora de realizar pruebas sobre la propia p\u00e1gina cargada, ya que de otra forma tendr\u00edamos que modificar el c\u00f3digo directamente, recargar la p\u00e1gina y volver a probarlo.","title":"Probando el responsive"},{"location":"introduccion-pruebas.html#probando-el-responsive","text":"Para probar nuestros dise\u00f1os responsive tenemos varias opciones, una de ellas es usar algunas de las webs que existen para tal fin. Como por ejemplo: Responsinator ( http://www.responsinator.com ) Esta herramienta est\u00e1 disponible solamente de forma online , pero nos permite ver de un solo vistazo como se mostrar\u00eda nuestra web con el tama\u00f1o de los smarthones y tablets m\u00e1s populares, como por ejemplo las diferentes versiones de iPhone, iPad, Kindle y algunas versiones de tel\u00e9fonos Android. El problema de estas herramientas es que tenemos que acceder a una versi\u00f3n publicada de nuestra web (no permiten localhost) y son un poco m\u00e1s lentas para realizar pruebas continuas, por esta raz\u00f3n es mucho m\u00e1s recomendable utilizar alguno de los kits de herramientas para el desarrollador web que existen para los diferentes navegadores.","title":"Probando el responsive"},{"location":"introduccion-pruebas.html#herramientas-del-navegador-para-el-desarrollador","text":"Tanto en Firefox como Chrome viene instalado por defecto una serie de herramientas de ayuda para el desarrollador que nos permiten, entre otras cosas, ver la consola de mensajes, inspeccionar el c\u00f3digo o ver la secuencia de llamadas al servidor. Adem\u00e1s de estas tambi\u00e9n existen otras herramientas m\u00e1s avanzadas que podemos instalar como una extensi\u00f3n de nuestro navegador, como por ejemplo Firebug. La ventaja de estas herramientas frente a las anteriores es que son muchos m\u00e1s r\u00e1pidas, nos permiten probar nuestra p\u00e1gina en local y adem\u00e1s podemos inspeccionar el c\u00f3digo y modificar los estilos en tiempo real. Usando el inspector de estas herramientas nos podemos ahorrar mucho tiempo a la hora de realizar pruebas sobre la propia p\u00e1gina cargada, ya que de otra forma tendr\u00edamos que modificar el c\u00f3digo directamente, recargar la p\u00e1gina y volver a probarlo.","title":"Herramientas del navegador para el desarrollador"},{"location":"introduccion.html","text":"Introducci\u00f3n al dise\u00f1o \" responsive \" \u00b6 El dise\u00f1o web responsive , adaptable o adaptativo, conocido por las siglas RWD (del ingl\u00e9s, Responsive Web Design ) es una filosof\u00eda de dise\u00f1o y desarrollo cuyo objetivo es adaptar la apariencia de las p\u00e1ginas web al dispositivo que se est\u00e9 utilizando para visualizarla. Hoy d\u00eda las p\u00e1ginas web se visualizan en multitud de tipos de dispositivos como tabletas, smartphones , libros electr\u00f3nicos, port\u00e1tiles, PCs, etc. Esta tecnolog\u00eda pretende que con un solo dise\u00f1o web tengamos una visualizaci\u00f3n adecuada en cualquier dispositivo. El dise\u00f1o responsive se basa en proporcionar a todos los usuarios de una web los mismos contenidos y una experiencia de usuario lo m\u00e1s similar posible, frente a otras aproximaciones al desarrollo web m\u00f3vil como la creaci\u00f3n de apps , el cambio de dominio o webs servidas din\u00e1micamente en funci\u00f3n del dispositivo. Aunque todas tienen pros y contras, la web responsive es considerada por muchos expertos como la mejor pr\u00e1ctica posible, al unificar la web, reducir tiempos de desarrollo y ofrecer grandes ventajas para SEO m\u00f3vil. Variabilidad en las resoluciones de pantalla \u00b6 Durante muchos a\u00f1os el desarrollo web se ha basado en la resoluci\u00f3n est\u00e1ndar de 1024\u00d7768. Pero en la actualidad existe una amplia variedad de resoluciones, no solo en pantallas de ordenadores de escritorio sino tambi\u00e9n para tablets y dispositivos m\u00f3viles. Es muy importante conocer todas estas estad\u00edsticas as\u00ed como cuales son las dimensiones de pantalla de los usuarios, a qu\u00e9 p\u00fablico vamos dirigidos, etc. y as\u00ed poder tenerlo en cuenta en la usabilidad de nuestra web. Ya no es posible centrar el desarrollo pensando que los usuarios van a tener (en un alto porcentaje) una \u00fanica resoluci\u00f3n de pantalla. Desde hace ya unos a\u00f1os en el desarrollo web se ha sustituido en cierta medida el problema de la compatibilidad de navegadores (gracias a que poco a poco todas las compa\u00f1\u00edas se est\u00e1n ci\u00f1endo a los est\u00e1ndares con HTML5/CSS3 y otras se basan directamente en web-kit) por el problema de las resoluciones de los dispositivos. En la siguiente tabla se pueden ver estad\u00edsticas de las resoluciones de pantalla m\u00e1s utilizadas: Resoluci\u00f3n % utilizaci\u00f3n > 1920x1080 34% 1920x1080 13% 1366x768 31% 1280x1024 8% 1280x800 7% 1024x768 6% 800\u00d7600 0.5% < 800\u00d7600 0.5% En la actualidad ya no es 1024x768 la resoluci\u00f3n m\u00e1s utilizada, sino que es 1366\u00d7768 y resoluciones superiores a 1920x1080. Es fundamental tener en cuenta que en el dise\u00f1o responsive , al variar tanto las posibles resoluciones en las que se ver\u00e1 nuestra web deberemos mostrar en primer lugar los contenidos m\u00e1s importantes e imprescindibles. Ejemplos de sitios web creados con tecnolog\u00eda Responsive \u00b6 En un art\u00edculo llamado: \" Responsive Web Design: 50 Examples and Best Practices \" muestra excelentes ejemplos de la aplicaci\u00f3n de esta tecnolog\u00eda. Algunos de estos ejemplos son: dConstruct 2011 Boston Globe Food Sense Deren keskin","title":"Introducci\u00f3n"},{"location":"introduccion.html#introduccion-al-diseno-responsive","text":"El dise\u00f1o web responsive , adaptable o adaptativo, conocido por las siglas RWD (del ingl\u00e9s, Responsive Web Design ) es una filosof\u00eda de dise\u00f1o y desarrollo cuyo objetivo es adaptar la apariencia de las p\u00e1ginas web al dispositivo que se est\u00e9 utilizando para visualizarla. Hoy d\u00eda las p\u00e1ginas web se visualizan en multitud de tipos de dispositivos como tabletas, smartphones , libros electr\u00f3nicos, port\u00e1tiles, PCs, etc. Esta tecnolog\u00eda pretende que con un solo dise\u00f1o web tengamos una visualizaci\u00f3n adecuada en cualquier dispositivo. El dise\u00f1o responsive se basa en proporcionar a todos los usuarios de una web los mismos contenidos y una experiencia de usuario lo m\u00e1s similar posible, frente a otras aproximaciones al desarrollo web m\u00f3vil como la creaci\u00f3n de apps , el cambio de dominio o webs servidas din\u00e1micamente en funci\u00f3n del dispositivo. Aunque todas tienen pros y contras, la web responsive es considerada por muchos expertos como la mejor pr\u00e1ctica posible, al unificar la web, reducir tiempos de desarrollo y ofrecer grandes ventajas para SEO m\u00f3vil.","title":"Introducci\u00f3n al dise\u00f1o \"responsive\""},{"location":"introduccion.html#variabilidad-en-las-resoluciones-de-pantalla","text":"Durante muchos a\u00f1os el desarrollo web se ha basado en la resoluci\u00f3n est\u00e1ndar de 1024\u00d7768. Pero en la actualidad existe una amplia variedad de resoluciones, no solo en pantallas de ordenadores de escritorio sino tambi\u00e9n para tablets y dispositivos m\u00f3viles. Es muy importante conocer todas estas estad\u00edsticas as\u00ed como cuales son las dimensiones de pantalla de los usuarios, a qu\u00e9 p\u00fablico vamos dirigidos, etc. y as\u00ed poder tenerlo en cuenta en la usabilidad de nuestra web. Ya no es posible centrar el desarrollo pensando que los usuarios van a tener (en un alto porcentaje) una \u00fanica resoluci\u00f3n de pantalla. Desde hace ya unos a\u00f1os en el desarrollo web se ha sustituido en cierta medida el problema de la compatibilidad de navegadores (gracias a que poco a poco todas las compa\u00f1\u00edas se est\u00e1n ci\u00f1endo a los est\u00e1ndares con HTML5/CSS3 y otras se basan directamente en web-kit) por el problema de las resoluciones de los dispositivos. En la siguiente tabla se pueden ver estad\u00edsticas de las resoluciones de pantalla m\u00e1s utilizadas: Resoluci\u00f3n % utilizaci\u00f3n > 1920x1080 34% 1920x1080 13% 1366x768 31% 1280x1024 8% 1280x800 7% 1024x768 6% 800\u00d7600 0.5% < 800\u00d7600 0.5% En la actualidad ya no es 1024x768 la resoluci\u00f3n m\u00e1s utilizada, sino que es 1366\u00d7768 y resoluciones superiores a 1920x1080. Es fundamental tener en cuenta que en el dise\u00f1o responsive , al variar tanto las posibles resoluciones en las que se ver\u00e1 nuestra web deberemos mostrar en primer lugar los contenidos m\u00e1s importantes e imprescindibles.","title":"Variabilidad en las resoluciones de pantalla"},{"location":"introduccion.html#ejemplos-de-sitios-web-creados-con-tecnologia-responsive","text":"En un art\u00edculo llamado: \" Responsive Web Design: 50 Examples and Best Practices \" muestra excelentes ejemplos de la aplicaci\u00f3n de esta tecnolog\u00eda. Algunos de estos ejemplos son: dConstruct 2011 Boston Globe Food Sense Deren keskin","title":"Ejemplos de sitios web creados con tecnolog\u00eda Responsive"},{"location":"media-queries.html","text":"Media queries \u00b6 En la mayor\u00eda de los casos gracias a todas las clases que provee Bootstrap nos ser\u00e1 suficiente para componer nuestra web. Sin embargo, en algunas situaciones es posible que queramos modificar dicho comportamiento, por ejemplo para aplicar determinados estilos CSS (colores, alineaci\u00f3n interna, etc.) que cambien seg\u00fan el tama\u00f1o de pantalla. En estos casos ser\u00e1 necesario que creemos nuestra propia media query para aplicar los estilos deseados. Una media query se define de la forma: 1 2 3 4 @ media ( min-width : TAMA\u00d1O-EN-P\u00cdXELES ) { /* Los estilos aqu\u00ed contenidos solo se aplicar\u00e1n a partir del tama\u00f1o de pantalla indicado */ } En este caso, los estilos que est\u00e9n dentro de esta media query se aplicar\u00e1n solo a partir del tama\u00f1o en p\u00edxeles indicado . Adem\u00e1s del tama\u00f1o m\u00ednimo, tambi\u00e9n podemos indicar el tama\u00f1o m\u00e1ximo o el rango de tama\u00f1o en el que se aplicar\u00e1n los estilos, de la forma: 1 2 3 4 5 6 @ media ( max-width : TAMA\u00d1O-EN-P\u00cdXELES ) { /* Estos estilos solo se aplicar\u00e1n hasta el tama\u00f1o indicado */ } @ media ( min-width : TAMA\u00d1O-EN-P\u00cdXELES ) and ( max-width : TAMA\u00d1O-EN-P\u00cdXELES ) { /* Solo se aplicar\u00e1n entre los tama\u00f1os indicados */ } Recordamos que los rangos que define Bootstrap son: Pantallas extra peque\u00f1as (m\u00f3viles) < 576px Pantallas peque\u00f1as (sm, tablets en vertical) \u2265 576px Pantallas medianas (md, para tablets en horizontal) \u2265 768px Pantallas grandes (lg, tama\u00f1o escritorio) \u2265 992px Pantallas extra grandes (xl, escritorio grande) \u2265 1200px Pantallas extra extra grandes (xxl, escritorio extra grande) \u2265 1400px Es importante tenerlos en cuenta a la hora de definir nuestras propias media queries , para crear los puntos de ruptura o cambio con las mismas dimensiones. Si no lo hicieramos as\u00ed estar\u00edamos a\u00f1adiendo todav\u00eda m\u00e1s casos a los cinco tama\u00f1os de pantalla que contempla Boostrap, y por lo tanto complicando tanto la programaci\u00f3n como el mantenimiento del c\u00f3digo. Ejemplos de uso \u00b6 Si por ejemplo queremos que en las pantallas extra peque\u00f1as (xs) el color de fondo que aplica la clase .miestilo sea rojo y para el resto de tama\u00f1os sea verde, podr\u00edamos hacer: 1 2 3 4 5 6 7 8 . miestilo { background-color : green ; } @ media ( max-width : 768px ) { . miestilo { background-color : red ; } } O si por ejemplo queremos variar la alineaci\u00f3n del texto que se aplica en una clase a partir de las pantallas tipo escritorio: 1 2 3 4 5 6 7 8 . miestilo { text-align : center ; } @ media ( min-width : 992px ) { . miestilo { text-align : left ; } } Estos sencillos ejemplos nos muestran la idea b\u00e1sica que tenemos que seguir para complementar el c\u00f3digo de Bootstrap para hacer que la web se comporte como nosotros queramos. De esta forma podemos llegar a hacer cosas muy avanzadas y personalizar completamente el aspecto de una web seg\u00fan el tama\u00f1o del dispositivo. Otros ejemplos de personalizaciones que podemos hacer usando las media queries son: Cambiar el tama\u00f1o y la posici\u00f3n de una imagen. Por ejemplo hacer que la imagen de cabecera sea muy peque\u00f1a para dispositivos m\u00f3viles y mucho mayor para pantallas de escritorio. Cambiar la posici\u00f3n de cualquier elemento. Si por ejemplo tenemos un elemento que no se ve bien con una alineaci\u00f3n en pantallas peque\u00f1as podemos colocarlo en otro lugar. Cambiar el tama\u00f1o de letra, la fuente o su color. Podemos reducir el tama\u00f1o de letra de las cabeceras para pantallas xs o aumentarlo para pantallas m\u00e1s grandes. Aplicar combinaciones de estilos avanzados. Por ejemplo, podemos crear un estilo \".articulo\" que seg\u00fan el tama\u00f1o de pantalla reajuste toda la apariencia de un art\u00edculo con todos los elementos que contenga. Cualquier cosa que se os ocurra!","title":"Media Queries"},{"location":"media-queries.html#media-queries","text":"En la mayor\u00eda de los casos gracias a todas las clases que provee Bootstrap nos ser\u00e1 suficiente para componer nuestra web. Sin embargo, en algunas situaciones es posible que queramos modificar dicho comportamiento, por ejemplo para aplicar determinados estilos CSS (colores, alineaci\u00f3n interna, etc.) que cambien seg\u00fan el tama\u00f1o de pantalla. En estos casos ser\u00e1 necesario que creemos nuestra propia media query para aplicar los estilos deseados. Una media query se define de la forma: 1 2 3 4 @ media ( min-width : TAMA\u00d1O-EN-P\u00cdXELES ) { /* Los estilos aqu\u00ed contenidos solo se aplicar\u00e1n a partir del tama\u00f1o de pantalla indicado */ } En este caso, los estilos que est\u00e9n dentro de esta media query se aplicar\u00e1n solo a partir del tama\u00f1o en p\u00edxeles indicado . Adem\u00e1s del tama\u00f1o m\u00ednimo, tambi\u00e9n podemos indicar el tama\u00f1o m\u00e1ximo o el rango de tama\u00f1o en el que se aplicar\u00e1n los estilos, de la forma: 1 2 3 4 5 6 @ media ( max-width : TAMA\u00d1O-EN-P\u00cdXELES ) { /* Estos estilos solo se aplicar\u00e1n hasta el tama\u00f1o indicado */ } @ media ( min-width : TAMA\u00d1O-EN-P\u00cdXELES ) and ( max-width : TAMA\u00d1O-EN-P\u00cdXELES ) { /* Solo se aplicar\u00e1n entre los tama\u00f1os indicados */ } Recordamos que los rangos que define Bootstrap son: Pantallas extra peque\u00f1as (m\u00f3viles) < 576px Pantallas peque\u00f1as (sm, tablets en vertical) \u2265 576px Pantallas medianas (md, para tablets en horizontal) \u2265 768px Pantallas grandes (lg, tama\u00f1o escritorio) \u2265 992px Pantallas extra grandes (xl, escritorio grande) \u2265 1200px Pantallas extra extra grandes (xxl, escritorio extra grande) \u2265 1400px Es importante tenerlos en cuenta a la hora de definir nuestras propias media queries , para crear los puntos de ruptura o cambio con las mismas dimensiones. Si no lo hicieramos as\u00ed estar\u00edamos a\u00f1adiendo todav\u00eda m\u00e1s casos a los cinco tama\u00f1os de pantalla que contempla Boostrap, y por lo tanto complicando tanto la programaci\u00f3n como el mantenimiento del c\u00f3digo.","title":"Media queries"},{"location":"media-queries.html#ejemplos-de-uso","text":"Si por ejemplo queremos que en las pantallas extra peque\u00f1as (xs) el color de fondo que aplica la clase .miestilo sea rojo y para el resto de tama\u00f1os sea verde, podr\u00edamos hacer: 1 2 3 4 5 6 7 8 . miestilo { background-color : green ; } @ media ( max-width : 768px ) { . miestilo { background-color : red ; } } O si por ejemplo queremos variar la alineaci\u00f3n del texto que se aplica en una clase a partir de las pantallas tipo escritorio: 1 2 3 4 5 6 7 8 . miestilo { text-align : center ; } @ media ( min-width : 992px ) { . miestilo { text-align : left ; } } Estos sencillos ejemplos nos muestran la idea b\u00e1sica que tenemos que seguir para complementar el c\u00f3digo de Bootstrap para hacer que la web se comporte como nosotros queramos. De esta forma podemos llegar a hacer cosas muy avanzadas y personalizar completamente el aspecto de una web seg\u00fan el tama\u00f1o del dispositivo. Otros ejemplos de personalizaciones que podemos hacer usando las media queries son: Cambiar el tama\u00f1o y la posici\u00f3n de una imagen. Por ejemplo hacer que la imagen de cabecera sea muy peque\u00f1a para dispositivos m\u00f3viles y mucho mayor para pantallas de escritorio. Cambiar la posici\u00f3n de cualquier elemento. Si por ejemplo tenemos un elemento que no se ve bien con una alineaci\u00f3n en pantallas peque\u00f1as podemos colocarlo en otro lugar. Cambiar el tama\u00f1o de letra, la fuente o su color. Podemos reducir el tama\u00f1o de letra de las cabeceras para pantallas xs o aumentarlo para pantallas m\u00e1s grandes. Aplicar combinaciones de estilos avanzados. Por ejemplo, podemos crear un estilo \".articulo\" que seg\u00fan el tama\u00f1o de pantalla reajuste toda la apariencia de un art\u00edculo con todos los elementos que contenga. Cualquier cosa que se os ocurra!","title":"Ejemplos de uso"},{"location":"pagina-basica.html","text":"P\u00e1gina b\u00e1sica \u00b6 Bootstrap utiliza ciertos elementos HTML y propiedades CSS que requieren el uso del doctype de HTML 5 para que funcionen, por lo que es importante a\u00f1adirlo a todas nuestras p\u00e1ginas: 1 2 3 4 <!DOCTYPE html> < html lang = \"en\" > ... </ html > Adem\u00e1s para asegurar que se muestra correctamente en dispositivos m\u00f3viles y que permite la utilizaci\u00f3n del zoom al arrastrar tenemos que a\u00f1adir la siguiente etiqueta meta dentro de la cabecera <head> : 1 2 < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > La propiedad width controla el tama\u00f1o del viewport. Puede definirse con un n\u00famero en pixeles como width=600 o con un valor especial como device-width que es el equivalente al ancho de la pantalla en p\u00edxeles del dispositivo que cargue la web. El atributo shrink-to-fit=\"no\" configura este mismo comportamiento para los navegadores Safari anteriores a la versi\u00f3n 9. La propiedad initial-scale del viewport controla el nivel de zoom cuando la p\u00e1gina se carga por primera vez. Las propiedades maximum-scale , minimum-scale , y user-scalable controlan la forma en c\u00f3mo se permite a los usuarios aumentar o disminiuir el zoom en la p\u00e1gina. Si a\u00f1adimos a la etiqueta meta del viewport el atributo user-scalable=no (como se puede ver en el ejemplo inferior) podemos deshabilitar el zoom para dispositivos m\u00f3viles. De esta forma los usuarios \u00fanicamente podr\u00e1n usar el scroll de la aplicaci\u00f3n, haciendo tu web m\u00e1s similar a una aplicaci\u00f3n nativa. Sin embargo, hay que usar esta caracter\u00edstica con cuidado ya que no es recomendable para todos los sitios. 1 2 3 < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no, maximum-scale=1, user-scalable=no\" > A continuaci\u00f3n se incluye la plantilla HTML base para cualquier proyecto con Bootstrap, a partir de la cual se tendr\u00e1n que ir a\u00f1adiendo el resto de elementos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Bootstrap CSS --> < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < h1 > Hello, world! </ h1 > <!-- Optional JavaScript; choose one of the two! --> <!-- Option 1: Bootstrap Bundle with Popper --> < script src = \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js\" integrity = \"sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ\" crossorigin = \"anonymous\" ></ script > <!-- Option 2: Separate Popper and Bootstrap JS --> <!-- <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js\" integrity=\"sha384-W8fXfP3gkOKtndU4JGtKDvXbO53Wy8SZCQHczT5FMiiqmQfUpWbYdTil/SxwZgAN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.min.js\" integrity=\"sha384-skAcpIdS7UcVUC05LJ9Dxay8AXcDYfBJqt1CJ85S/CFujBsIzCIv+l9liuYLaMQ/\" crossorigin=\"anonymous\"></script> --> </ body > </ html > Como se puede ver hemos a\u00f1adido la etiqueta meta de cabecera y hemos cargado la hoja de estilo de Bootstrap y las librer\u00edas Javascript que vamos a necesitar (bootstrap.bundle.min.js, que contiene JQuery, Bootstrap y Popper). Tambi\u00e9n hemos a\u00f1adido la etiqueta h1 con \"Hello world!\" dentro del cuerpo de la web, que ser\u00e1 donde podremos empezar a escribir el contenido de nuestro sitio web responsive.","title":"P\u00e1gina b\u00e1sica"},{"location":"pagina-basica.html#pagina-basica","text":"Bootstrap utiliza ciertos elementos HTML y propiedades CSS que requieren el uso del doctype de HTML 5 para que funcionen, por lo que es importante a\u00f1adirlo a todas nuestras p\u00e1ginas: 1 2 3 4 <!DOCTYPE html> < html lang = \"en\" > ... </ html > Adem\u00e1s para asegurar que se muestra correctamente en dispositivos m\u00f3viles y que permite la utilizaci\u00f3n del zoom al arrastrar tenemos que a\u00f1adir la siguiente etiqueta meta dentro de la cabecera <head> : 1 2 < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > La propiedad width controla el tama\u00f1o del viewport. Puede definirse con un n\u00famero en pixeles como width=600 o con un valor especial como device-width que es el equivalente al ancho de la pantalla en p\u00edxeles del dispositivo que cargue la web. El atributo shrink-to-fit=\"no\" configura este mismo comportamiento para los navegadores Safari anteriores a la versi\u00f3n 9. La propiedad initial-scale del viewport controla el nivel de zoom cuando la p\u00e1gina se carga por primera vez. Las propiedades maximum-scale , minimum-scale , y user-scalable controlan la forma en c\u00f3mo se permite a los usuarios aumentar o disminiuir el zoom en la p\u00e1gina. Si a\u00f1adimos a la etiqueta meta del viewport el atributo user-scalable=no (como se puede ver en el ejemplo inferior) podemos deshabilitar el zoom para dispositivos m\u00f3viles. De esta forma los usuarios \u00fanicamente podr\u00e1n usar el scroll de la aplicaci\u00f3n, haciendo tu web m\u00e1s similar a una aplicaci\u00f3n nativa. Sin embargo, hay que usar esta caracter\u00edstica con cuidado ya que no es recomendable para todos los sitios. 1 2 3 < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no, maximum-scale=1, user-scalable=no\" > A continuaci\u00f3n se incluye la plantilla HTML base para cualquier proyecto con Bootstrap, a partir de la cual se tendr\u00e1n que ir a\u00f1adiendo el resto de elementos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Bootstrap CSS --> < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < h1 > Hello, world! </ h1 > <!-- Optional JavaScript; choose one of the two! --> <!-- Option 1: Bootstrap Bundle with Popper --> < script src = \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js\" integrity = \"sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ\" crossorigin = \"anonymous\" ></ script > <!-- Option 2: Separate Popper and Bootstrap JS --> <!-- <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js\" integrity=\"sha384-W8fXfP3gkOKtndU4JGtKDvXbO53Wy8SZCQHczT5FMiiqmQfUpWbYdTil/SxwZgAN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.min.js\" integrity=\"sha384-skAcpIdS7UcVUC05LJ9Dxay8AXcDYfBJqt1CJ85S/CFujBsIzCIv+l9liuYLaMQ/\" crossorigin=\"anonymous\"></script> --> </ body > </ html > Como se puede ver hemos a\u00f1adido la etiqueta meta de cabecera y hemos cargado la hoja de estilo de Bootstrap y las librer\u00edas Javascript que vamos a necesitar (bootstrap.bundle.min.js, que contiene JQuery, Bootstrap y Popper). Tambi\u00e9n hemos a\u00f1adido la etiqueta h1 con \"Hello world!\" dentro del cuerpo de la web, que ser\u00e1 donde podremos empezar a escribir el contenido de nuestro sitio web responsive.","title":"P\u00e1gina b\u00e1sica"},{"location":"rejilla-alineacion.html","text":"Alineaci\u00f3n \u00b6 Con la nueva versi\u00f3n de Bootstrap tambi\u00e9n han aparecido nuevas clases que nos permiten especificar la alineaci\u00f3n de las columnas tanto en horizontal como en vertical. Alineaci\u00f3n vertical \u00b6 Para indicar la alineaci\u00f3n en vertical tenemos dos opciones: indicar la misma alineaci\u00f3n para todos los elementos de una fila o indicar la alineaci\u00f3n a nivel de columna, lo que nos permitir\u00e1 establecer distintas alineaciones para cada columna. En el primer caso la clase CSS para la alineaci\u00f3n la tendremos que a\u00f1adir a la fila usando la etiqueta \" .align-items-* \", donde \"*\" podr\u00e1 ser \" start \" (al principio o pegada a la parte superior de la fila), \" center \" (alineaci\u00f3n centrada en vertical) o \" end \" (alineaci\u00f3n pegada al final o a la parte inferior de la fila). A continuaci\u00f3n se incluye un ejemplo de los tres tipos de alineaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < div class = \"container\" > < div class = \"row align-items-start\" > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > </ div > < div class = \"row align-items-center\" > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > </ div > < div class = \"row align-items-end\" > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado como el de la siguiente figura: En el segundo caso, si queremos indicar por separado la alineaci\u00f3n vertical de cada una de las columnas de una fila, tendremos que usar la clase CSS .align-self-* , donde \"*\" podr\u00e1 adoptar los mismos valores: start , center o end . A continuaci\u00f3n se incluye un ejemplo en el que se indican los tres tipos de alineaciones dentro de una misma fila: 1 2 3 4 5 6 7 < div class = \"container\" > < div class = \"row\" > < div class = \"col align-self-start\" > One of three columns </ div > < div class = \"col align-self-center\" > One of three columns </ div > < div class = \"col align-self-end\" > One of three columns </ div > </ div > </ div > Con lo que obtendremos el siguiente resultado: Es importante destacar que al utilizar cualquierda de estas etiquetas de alineaci\u00f3n, la altura de las columnas se ajustar\u00e1 al contenido , mientras que si no utilizamos ninguna etiqueta de alineaci\u00f3n, la altura de la celda se extender\u00e1 hasta ocupar todo el espacio disponible en la fila. Alineaci\u00f3n horizontal \u00b6 Tambi\u00e9n podemos especificar la alineaci\u00f3n horizontal de los elementos de una fila. Para esto disponemos de la clase \" .justify-content-* \", donde \"*\" podr\u00e1 ser \" start \" (izquierda), \" center \" (centrado), \" end \" (derecha), \" around \" (a\u00f1adir\u00e1 el mismo espacio a ambos lados de la columna) y \" between \" (a\u00f1ade espacio entre las columnas). A continuaci\u00f3n se incluye un ejemplo de cada uno de estos tipos de alineaci\u00f3n horizontal: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < div class = \"container\" > < div class = \"row justify-content-start\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-center\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-end\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-around\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-between\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado similar al de la siguiente figura, con la fila alineada a la izquerda, la segunda centrada, la tercera alineada a la derecha, la cuarta con el espaciado \"al rededor\" (o a ambos lados) de las columnas, y la \u00faltima con el espaciado entre las columnas. Alineaci\u00f3n responsive \u00b6 En caso de que lo necesitemos podremos a\u00f1adir tambi\u00e9n el tama\u00f1o de pantalla a las distintas clases de alineaci\u00f3n que hemos visto: align-items-* , align-self-* y justify-content-* . Para esto tendremos que a\u00f1adir primero el tama\u00f1o de pantalla (sm, md, lg, xl o xxl), a continuaci\u00f3n un gui\u00f3n (-), y despu\u00e9s el tipo de alineaci\u00f3n deseado (de entre los que hemos visto), por ejemplo: align-items-md-center , align-self-sm-end , justify-content-lg-end , etc. Al indicar el tama\u00f1o de pantalla dicha alineaci\u00f3n se aplicar\u00e1 solamente a partir de dicho tama\u00f1o en adelante, aunque tambi\u00e9n podemos indicar distintas alineaciones para un mismo campo seg\u00fan el tama\u00f1o de la pantalla, por ejemplo: 1 2 3 < div class = \"row justify-content-center justify-content-md-start\" > ... </ div > En el ejemplo anterior el contenido se alinear\u00eda de forma centrada para los tama\u00f1os de pantalla extra peque\u00f1os y peque\u00f1os, y cambiar\u00e1 a alineazi\u00f3n izquierda a partir del tama\u00f1o de pantalla \"md\".","title":"Alineaci\u00f3n"},{"location":"rejilla-alineacion.html#alineacion","text":"Con la nueva versi\u00f3n de Bootstrap tambi\u00e9n han aparecido nuevas clases que nos permiten especificar la alineaci\u00f3n de las columnas tanto en horizontal como en vertical.","title":"Alineaci\u00f3n"},{"location":"rejilla-alineacion.html#alineacion-vertical","text":"Para indicar la alineaci\u00f3n en vertical tenemos dos opciones: indicar la misma alineaci\u00f3n para todos los elementos de una fila o indicar la alineaci\u00f3n a nivel de columna, lo que nos permitir\u00e1 establecer distintas alineaciones para cada columna. En el primer caso la clase CSS para la alineaci\u00f3n la tendremos que a\u00f1adir a la fila usando la etiqueta \" .align-items-* \", donde \"*\" podr\u00e1 ser \" start \" (al principio o pegada a la parte superior de la fila), \" center \" (alineaci\u00f3n centrada en vertical) o \" end \" (alineaci\u00f3n pegada al final o a la parte inferior de la fila). A continuaci\u00f3n se incluye un ejemplo de los tres tipos de alineaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < div class = \"container\" > < div class = \"row align-items-start\" > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > </ div > < div class = \"row align-items-center\" > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > </ div > < div class = \"row align-items-end\" > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > < div class = \"col\" > One of three columns </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado como el de la siguiente figura: En el segundo caso, si queremos indicar por separado la alineaci\u00f3n vertical de cada una de las columnas de una fila, tendremos que usar la clase CSS .align-self-* , donde \"*\" podr\u00e1 adoptar los mismos valores: start , center o end . A continuaci\u00f3n se incluye un ejemplo en el que se indican los tres tipos de alineaciones dentro de una misma fila: 1 2 3 4 5 6 7 < div class = \"container\" > < div class = \"row\" > < div class = \"col align-self-start\" > One of three columns </ div > < div class = \"col align-self-center\" > One of three columns </ div > < div class = \"col align-self-end\" > One of three columns </ div > </ div > </ div > Con lo que obtendremos el siguiente resultado: Es importante destacar que al utilizar cualquierda de estas etiquetas de alineaci\u00f3n, la altura de las columnas se ajustar\u00e1 al contenido , mientras que si no utilizamos ninguna etiqueta de alineaci\u00f3n, la altura de la celda se extender\u00e1 hasta ocupar todo el espacio disponible en la fila.","title":"Alineaci\u00f3n vertical"},{"location":"rejilla-alineacion.html#alineacion-horizontal","text":"Tambi\u00e9n podemos especificar la alineaci\u00f3n horizontal de los elementos de una fila. Para esto disponemos de la clase \" .justify-content-* \", donde \"*\" podr\u00e1 ser \" start \" (izquierda), \" center \" (centrado), \" end \" (derecha), \" around \" (a\u00f1adir\u00e1 el mismo espacio a ambos lados de la columna) y \" between \" (a\u00f1ade espacio entre las columnas). A continuaci\u00f3n se incluye un ejemplo de cada uno de estos tipos de alineaci\u00f3n horizontal: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < div class = \"container\" > < div class = \"row justify-content-start\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-center\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-end\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-around\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > < div class = \"row justify-content-between\" > < div class = \"col-4\" > One of two columns </ div > < div class = \"col-4\" > One of two columns </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado similar al de la siguiente figura, con la fila alineada a la izquerda, la segunda centrada, la tercera alineada a la derecha, la cuarta con el espaciado \"al rededor\" (o a ambos lados) de las columnas, y la \u00faltima con el espaciado entre las columnas.","title":"Alineaci\u00f3n horizontal"},{"location":"rejilla-alineacion.html#alineacion-responsive","text":"En caso de que lo necesitemos podremos a\u00f1adir tambi\u00e9n el tama\u00f1o de pantalla a las distintas clases de alineaci\u00f3n que hemos visto: align-items-* , align-self-* y justify-content-* . Para esto tendremos que a\u00f1adir primero el tama\u00f1o de pantalla (sm, md, lg, xl o xxl), a continuaci\u00f3n un gui\u00f3n (-), y despu\u00e9s el tipo de alineaci\u00f3n deseado (de entre los que hemos visto), por ejemplo: align-items-md-center , align-self-sm-end , justify-content-lg-end , etc. Al indicar el tama\u00f1o de pantalla dicha alineaci\u00f3n se aplicar\u00e1 solamente a partir de dicho tama\u00f1o en adelante, aunque tambi\u00e9n podemos indicar distintas alineaciones para un mismo campo seg\u00fan el tama\u00f1o de la pantalla, por ejemplo: 1 2 3 < div class = \"row justify-content-center justify-content-md-start\" > ... </ div > En el ejemplo anterior el contenido se alinear\u00eda de forma centrada para los tama\u00f1os de pantalla extra peque\u00f1os y peque\u00f1os, y cambiar\u00e1 a alineazi\u00f3n izquierda a partir del tama\u00f1o de pantalla \"md\".","title":"Alineaci\u00f3n responsive"},{"location":"rejilla-anidamiento-de-columnas.html","text":"Anidamiento de columnas \u00b6 Una caracter\u00edstica muy potente del sistema de rejilla es que se pueden anidar columnas dentro de otras columnas. Para esto solamente tenemos que crear una nueva fila dentro de una columna, y dentro de esta nueva fila podremos subdividirla usando tambi\u00e9n hasta 12 columnas. Por ejemplo, en el siguiente c\u00f3digo se crea una primera fila con una columna de tama\u00f1o 9, dentro de la cual se a\u00f1ade una segunda fila con dos columnas: 1 2 3 4 5 6 7 8 9 < div class = \"row\" > < div class = \"col-sm-9\" > Level 1: .col-sm-9 < div class = \"row\" > < div class = \"col-8 col-sm-6\" > Level 2: .col-8 .col-sm-6 </ div > < div class = \"col-4 col-sm-6\" > Level 2: .col-4 .col-sm-6 </ div > </ div > </ div > </ div > Al visualizar este c\u00f3digo obtendr\u00edamos:","title":"Anidamiento de columnas"},{"location":"rejilla-anidamiento-de-columnas.html#anidamiento-de-columnas","text":"Una caracter\u00edstica muy potente del sistema de rejilla es que se pueden anidar columnas dentro de otras columnas. Para esto solamente tenemos que crear una nueva fila dentro de una columna, y dentro de esta nueva fila podremos subdividirla usando tambi\u00e9n hasta 12 columnas. Por ejemplo, en el siguiente c\u00f3digo se crea una primera fila con una columna de tama\u00f1o 9, dentro de la cual se a\u00f1ade una segunda fila con dos columnas: 1 2 3 4 5 6 7 8 9 < div class = \"row\" > < div class = \"col-sm-9\" > Level 1: .col-sm-9 < div class = \"row\" > < div class = \"col-8 col-sm-6\" > Level 2: .col-8 .col-sm-6 </ div > < div class = \"col-4 col-sm-6\" > Level 2: .col-4 .col-sm-6 </ div > </ div > </ div > </ div > Al visualizar este c\u00f3digo obtendr\u00edamos:","title":"Anidamiento de columnas"},{"location":"rejilla-columnas-de-ancho-automatico.html","text":"Columnas de ancho autom\u00e1tico \u00b6 A partir de la versi\u00f3n 4 de Bootstrap podemos utilizar las columnas de ancho autom\u00e1tico, es decir, indicar \u00fanicamente el n\u00famero de columnas que queremos y el sistema calcular\u00e1 autom\u00e1ticamente su anchura. Para esto podremos usar la clase \" .col \" , sin n\u00famero de columnas ni tama\u00f1o de pantalla, por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > 1 of 2 </ div > < div class = \"col\" > 2 of 2 </ div > </ div > < div class = \"row\" > < div class = \"col\" > 1 of 3 </ div > < div class = \"col\" > 2 of 3 </ div > < div class = \"col\" > 3 of 3 </ div > </ div > </ div > Con este c\u00f3digo obtendr\u00edamos un resultado similar al de la siguiente figura, donde en primer lugar se crea una fila con dos columna de igual ancho, y a continuaci\u00f3n se a\u00f1ade una segunda fila con tres columnas de igual ancho. El n\u00famero de columnas del ejemplo anterior se mantendr\u00e1 para todos los tama\u00f1os de pantalla, adaptando el ancho de las columnas para cada uno de ellos. A esta clase podemos a\u00f1adir el sufijo para establecer el tama\u00f1o de pantalla, por lo que disponemos de las clases: .col, .col-sm, .col-md, .col-lg, .col-xl y .col-xxl . En todos los casos estaremos indicando que queremos una columna de ancho autom\u00e1tico desde el tama\u00f1o de pantalla indicado en adelante. Debemos de tener en cuenta que si indicamos algo como <div class=\"col col-sm col-md\"> el resultado que obtendr\u00edamos ser\u00eda el mismo en todos los tama\u00f1os, una columna de ancho autom\u00e1tico, equivalente a haber indicado \u00fanicamente <div class=\"col\"> . Por lo tanto, el uso de estos sufijos solo se justicar\u00e1 cuando queramos una columna de ancho autom\u00e1tico solamente de un tama\u00f1o en adelante, y que por lo tanto, para los tama\u00f1os inferiores se cree una columna que ocupe todo el ancho. Por ejemplo, veamos el siguiente c\u00f3digo: 1 2 3 4 5 < div class = \"row\" > < div class = \"col-sm\" > col-sm </ div > < div class = \"col-sm\" > col-sm </ div > < div class = \"col-sm\" > col-sm </ div > </ div > Estamos indicando que queremos una fila con tres columnas de ancho autom\u00e1tico para los tama\u00f1os desde sm en adelante, y por lo tanto, para el tama\u00f1o extra peque\u00f1o estas tres columnas pasar\u00e1n a ocupar todo el ancho, transform\u00e1ndose en tres filas completas. Modo mixto \u00b6 Estas columnas de ancho autom\u00e1tico se pueden mezclar en una misma fila con las columnas de ancho espec\u00edfico que hemos visto antes. La forma de calcular el ancho de cada columna ser\u00e1 el siguiente: En primer lugar se calcular\u00e1 el tama\u00f1o de las columnas de ancho espec\u00edfico y a continuaci\u00f3n se rellenar\u00e1 el espacio restante usando las columnas de ancho autom\u00e1tico. Por ejemplo, a continuaci\u00f3n vamos a definir dos filas mezclando ambos tipos de columnas: 1 2 3 4 5 6 7 8 9 10 11 12 < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > 1 of 3 </ div > < div class = \"col-6\" > 2 of 3 (wider) </ div > < div class = \"col\" > 3 of 3 </ div > </ div > < div class = \"row\" > < div class = \"col-5\" > 1 of 3 (wider) </ div > < div class = \"col\" > 2 of 3 </ div > < div class = \"col\" > 3 of 3 </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado similar al de la siguiente figura: Como podemos ver en este ejemplo, los sistemas para de definir las columnas se pueden mezclar como queramos , por ejemplo usando el de ancho fijo entre dos columnas de ancho autom\u00e1tico, o establenciendo una columna de ancho espec\u00edfico al principio y despu\u00e9s dos de ancho autom\u00e1tico. Ancho de columna variable \u00b6 Con Bootstrap 4 tambi\u00e9n se introdujeron las columnas de ancho variable, las cuales ocupar\u00e1n el ancho justo que se necesite seg\u00fan el contenido de la columna. Para utilizarlas disponemos de las clases \" .col-*-auto \", donde * puede ser culquiera de los sufijos de tama\u00f1o de pantalla que hemos visto antes sm , md , lg , xl , xxl , o ning\u00fan sufijo ( .col-auto ) para indicar todos los tama\u00f1os. Estas etiquetas, igual que las de ancho autom\u00e1tico, se pueden mezclar con las de ancho espec\u00edfico, por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 < div class = \"container\" > < div class = \"row justify-content-md-center\" > < div class = \"col col-lg-2\" > 1 of 3 </ div > < div class = \"col-md-auto\" > Variable width content </ div > < div class = \"col col-lg-2\" > 3 of 3 </ div > </ div > < div class = \"row\" > < div class = \"col\" > 1 of 3 </ div > < div class = \"col-md-auto\" > Variable width content </ div > < div class = \"col col-lg-2\" > 3 of 3 </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado similar al de la siguiente figura: En el c\u00f3digo anterior se ha usado la clase \" .justify-content-md-center \" para alinear el contenido dentro de una fila, estas etiquetas las veremos en la secci\u00f3n \"Alineaci\u00f3n\". A continuaci\u00f3n vamos a ver otras utilidades del sistema de rejilla, como el anidamiento de columnas, o c\u00f3mo forzar el cambio de fila.","title":"Columnas de ancho autom\u00e1tico"},{"location":"rejilla-columnas-de-ancho-automatico.html#columnas-de-ancho-automatico","text":"A partir de la versi\u00f3n 4 de Bootstrap podemos utilizar las columnas de ancho autom\u00e1tico, es decir, indicar \u00fanicamente el n\u00famero de columnas que queremos y el sistema calcular\u00e1 autom\u00e1ticamente su anchura. Para esto podremos usar la clase \" .col \" , sin n\u00famero de columnas ni tama\u00f1o de pantalla, por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > 1 of 2 </ div > < div class = \"col\" > 2 of 2 </ div > </ div > < div class = \"row\" > < div class = \"col\" > 1 of 3 </ div > < div class = \"col\" > 2 of 3 </ div > < div class = \"col\" > 3 of 3 </ div > </ div > </ div > Con este c\u00f3digo obtendr\u00edamos un resultado similar al de la siguiente figura, donde en primer lugar se crea una fila con dos columna de igual ancho, y a continuaci\u00f3n se a\u00f1ade una segunda fila con tres columnas de igual ancho. El n\u00famero de columnas del ejemplo anterior se mantendr\u00e1 para todos los tama\u00f1os de pantalla, adaptando el ancho de las columnas para cada uno de ellos. A esta clase podemos a\u00f1adir el sufijo para establecer el tama\u00f1o de pantalla, por lo que disponemos de las clases: .col, .col-sm, .col-md, .col-lg, .col-xl y .col-xxl . En todos los casos estaremos indicando que queremos una columna de ancho autom\u00e1tico desde el tama\u00f1o de pantalla indicado en adelante. Debemos de tener en cuenta que si indicamos algo como <div class=\"col col-sm col-md\"> el resultado que obtendr\u00edamos ser\u00eda el mismo en todos los tama\u00f1os, una columna de ancho autom\u00e1tico, equivalente a haber indicado \u00fanicamente <div class=\"col\"> . Por lo tanto, el uso de estos sufijos solo se justicar\u00e1 cuando queramos una columna de ancho autom\u00e1tico solamente de un tama\u00f1o en adelante, y que por lo tanto, para los tama\u00f1os inferiores se cree una columna que ocupe todo el ancho. Por ejemplo, veamos el siguiente c\u00f3digo: 1 2 3 4 5 < div class = \"row\" > < div class = \"col-sm\" > col-sm </ div > < div class = \"col-sm\" > col-sm </ div > < div class = \"col-sm\" > col-sm </ div > </ div > Estamos indicando que queremos una fila con tres columnas de ancho autom\u00e1tico para los tama\u00f1os desde sm en adelante, y por lo tanto, para el tama\u00f1o extra peque\u00f1o estas tres columnas pasar\u00e1n a ocupar todo el ancho, transform\u00e1ndose en tres filas completas.","title":"Columnas de ancho autom\u00e1tico"},{"location":"rejilla-columnas-de-ancho-automatico.html#modo-mixto","text":"Estas columnas de ancho autom\u00e1tico se pueden mezclar en una misma fila con las columnas de ancho espec\u00edfico que hemos visto antes. La forma de calcular el ancho de cada columna ser\u00e1 el siguiente: En primer lugar se calcular\u00e1 el tama\u00f1o de las columnas de ancho espec\u00edfico y a continuaci\u00f3n se rellenar\u00e1 el espacio restante usando las columnas de ancho autom\u00e1tico. Por ejemplo, a continuaci\u00f3n vamos a definir dos filas mezclando ambos tipos de columnas: 1 2 3 4 5 6 7 8 9 10 11 12 < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > 1 of 3 </ div > < div class = \"col-6\" > 2 of 3 (wider) </ div > < div class = \"col\" > 3 of 3 </ div > </ div > < div class = \"row\" > < div class = \"col-5\" > 1 of 3 (wider) </ div > < div class = \"col\" > 2 of 3 </ div > < div class = \"col\" > 3 of 3 </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado similar al de la siguiente figura: Como podemos ver en este ejemplo, los sistemas para de definir las columnas se pueden mezclar como queramos , por ejemplo usando el de ancho fijo entre dos columnas de ancho autom\u00e1tico, o establenciendo una columna de ancho espec\u00edfico al principio y despu\u00e9s dos de ancho autom\u00e1tico.","title":"Modo mixto"},{"location":"rejilla-columnas-de-ancho-automatico.html#ancho-de-columna-variable","text":"Con Bootstrap 4 tambi\u00e9n se introdujeron las columnas de ancho variable, las cuales ocupar\u00e1n el ancho justo que se necesite seg\u00fan el contenido de la columna. Para utilizarlas disponemos de las clases \" .col-*-auto \", donde * puede ser culquiera de los sufijos de tama\u00f1o de pantalla que hemos visto antes sm , md , lg , xl , xxl , o ning\u00fan sufijo ( .col-auto ) para indicar todos los tama\u00f1os. Estas etiquetas, igual que las de ancho autom\u00e1tico, se pueden mezclar con las de ancho espec\u00edfico, por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 < div class = \"container\" > < div class = \"row justify-content-md-center\" > < div class = \"col col-lg-2\" > 1 of 3 </ div > < div class = \"col-md-auto\" > Variable width content </ div > < div class = \"col col-lg-2\" > 3 of 3 </ div > </ div > < div class = \"row\" > < div class = \"col\" > 1 of 3 </ div > < div class = \"col-md-auto\" > Variable width content </ div > < div class = \"col col-lg-2\" > 3 of 3 </ div > </ div > </ div > Con lo que obtendr\u00edamos un resultado similar al de la siguiente figura: En el c\u00f3digo anterior se ha usado la clase \" .justify-content-md-center \" para alinear el contenido dentro de una fila, estas etiquetas las veremos en la secci\u00f3n \"Alineaci\u00f3n\". A continuaci\u00f3n vamos a ver otras utilidades del sistema de rejilla, como el anidamiento de columnas, o c\u00f3mo forzar el cambio de fila.","title":"Ancho de columna variable"},{"location":"rejilla-columnas-de-ancho-especifico.html","text":"Columnas de ancho espec\u00edfico \u00b6 A continuaci\u00f3n se incluyen algunos ejemplos de uso del sistema de rejilla que nos ayudar\u00e1n a comprender mejor su funcionamiento. Selecci\u00f3n de tama\u00f1o de las columnas solo para pantallas medianas \u00b6 En el siguiente ejemplo se han creado 3 filas, la primera dividida en 2 columnas de tama\u00f1o desigual, la segunda en 3 columnas de igual tama\u00f1o y la tercera en 2 columnas tambi\u00e9n de igual tama\u00f1o. 1 2 3 4 5 6 7 8 9 10 11 12 13 < div class = \"row\" > < div class = \"col-md-8\" > .col-md-8 </ div > < div class = \"col-md-4\" > .col-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4\" > .col-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-md-6\" > .col-md-6 </ div > < div class = \"col-md-6\" > .col-md-6 </ div > </ div > En la siguiente imagen se puede ver el resultado para pantallas de tama\u00f1o mediano (tama\u00f1os de md en adelante): Para poder visualizar las columnas se ha a\u00f1adido una clase CSS que establece color para el borde y el fondo de las cajas. Por defecto, ni la etiqueta DIV ni las etiquetas .col-* establecen apariencia (ni color de borde ni de fondo), solamente establecen la anchura, y por lo tanto al renderizar el c\u00f3digo anterior tal cual las cajas se ver\u00e1n transparentes. Dado que las columnas se han especificado \u00fanicamente mediante las clases .col-md-* esto crear\u00e1 estas divisiones solo para las pantallas medianas y grandes, pero no para los tama\u00f1os de pantalla m\u00e1s peque\u00f1os. En este \u00faltimo caso las columnas se ampliar\u00e1n para ocupar todo el ancho y por lo tanto se mostrar\u00e1n apiladas de la forma: Selecci\u00f3n de dos tama\u00f1os de columna: peque\u00f1o y mediano \u00b6 Si no queremos que las columnas se muestren apiladas para tama\u00f1os de pantalla peque\u00f1os podemos indicar tambi\u00e9n la disposici\u00f3n para esos casos mediante las clases .col-* adem\u00e1s de las que ya ten\u00edamos con .col-md-* . Por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <!-- En pantallas peque\u00f1as aparecer\u00e1 una columna que ocupar\u00e1 todo el ancho y otra que ocupar\u00e1 la mitad de la pantalla --> < div class = \"row\" > < div class = \"col-12 col-md-8\" > .col-12 .col-md-8 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > </ div > <!-- En pantallas medianas se indica que cada columna ocupe la mitad del ancho disponible --> < div class = \"row\" > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > </ div > <!-- Como no se indica el tama\u00f1o para pantallas grandes las columnas siempre ocupar\u00e1n el 50% --> < div class = \"row\" > < div class = \"col-6\" > .col-6 </ div > < div class = \"col-6\" > .col-6 </ div > </ div > En la siguiente imagen se puede ver como quedar\u00eda el c\u00f3digo de ejemplo para pantallas medianas y grandes (tama\u00f1os de md en adelante): En el caso de pantallas peque\u00f1as las columnas se ver\u00edan de la forma: Selecci\u00f3n de tres tama\u00f1os: extra peque\u00f1o, peque\u00f1o y mediano \u00b6 Si queremos tener un mayor control podemos especificar tambi\u00e9n el tama\u00f1o de las columnas para las pantallas tipo small con las clases .col-sm-* . Por ejemplo: 1 2 3 4 5 6 7 8 9 < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-8\" > .col-12 .col-sm-6 .col-md-8 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-6 col-sm-4\" > .col-6 .col-sm-4 </ div > < div class = \"col-6 col-sm-4\" > .col-6 .col-sm-4 </ div > < div class = \"col-6 col-sm-4\" > .col-6 .col-sm-4 </ div > </ div > A continuaci\u00f3n se incluye una previsualizaci\u00f3n de este c\u00f3digo de ejemplo para pantallas medianas y grandes (tama\u00f1os md, lg, xl y xxl): El mismo c\u00f3digo pero en pantallas tipo small (tama\u00f1o sm) se mostrar\u00eda como: Y en el caso de pantallas peque\u00f1as se ver\u00eda de la forma: Adem\u00e1s de los tres tama\u00f1os indicados en este \u00faltimo ejemplo para la primera columna ( .col-12 .col-sm-6 .col-md-8 ) podr\u00edamos a\u00f1adir tambi\u00e9n, si lo necesitamos, el tama\u00f1o para pantallas grandes, extra grandes y extra extra grandes con .col-lg- , col-xl- y col-xxl- . Por ejemplo, podr\u00edamos haber definido la siguiente columna: 1 < div class = \"col-12 col-sm-6 col-md-8 col-lg-9 col-xl-10 col-xxl-11\" > ... </ div > En resumen, podemos indicar para cada columna todos los tama\u00f1os que queramos de entre los disponibles (con .col- , .col-sm- , .col-md- , .col-lg- , .col-xl- y .col-xxl- ). Sin embargo, esto solo lo tendremos que hacer cuando necesitemos establecer un ancho de columna distinto para cada tama\u00f1o de pantalla. Si para todos los tama\u00f1os de pantalla necesitamos el mismo ancho, entonces utilizaremos solamente la clase .col- . Es decir, no tendr\u00eda sentido escribir algo como \" col-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 \", ya que se conseguir\u00eda el mismo efecto que si hubieramos puesto solamente \" col-6 \". Por lo tanto, solo a\u00f1adiremos m\u00e1s de una clase cuando necesitemos establecer anchos distintos entre esos tama\u00f1os, y adem\u00e1s, si solo vamos a diferenciar entre 2 tama\u00f1os, solo ser\u00e1 necesario usar 2 etiquetas. Por ejemplo, si queremos diferenciar solamente entre movil y escritorio solamente tendr\u00edamos que a\u00f1adir la clase .col- y la clase .col-md- .","title":"Columnas de ancho espec\u00edfico"},{"location":"rejilla-columnas-de-ancho-especifico.html#columnas-de-ancho-especifico","text":"A continuaci\u00f3n se incluyen algunos ejemplos de uso del sistema de rejilla que nos ayudar\u00e1n a comprender mejor su funcionamiento.","title":"Columnas de ancho espec\u00edfico"},{"location":"rejilla-columnas-de-ancho-especifico.html#seleccion-de-tamano-de-las-columnas-solo-para-pantallas-medianas","text":"En el siguiente ejemplo se han creado 3 filas, la primera dividida en 2 columnas de tama\u00f1o desigual, la segunda en 3 columnas de igual tama\u00f1o y la tercera en 2 columnas tambi\u00e9n de igual tama\u00f1o. 1 2 3 4 5 6 7 8 9 10 11 12 13 < div class = \"row\" > < div class = \"col-md-8\" > .col-md-8 </ div > < div class = \"col-md-4\" > .col-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4\" > .col-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-md-6\" > .col-md-6 </ div > < div class = \"col-md-6\" > .col-md-6 </ div > </ div > En la siguiente imagen se puede ver el resultado para pantallas de tama\u00f1o mediano (tama\u00f1os de md en adelante): Para poder visualizar las columnas se ha a\u00f1adido una clase CSS que establece color para el borde y el fondo de las cajas. Por defecto, ni la etiqueta DIV ni las etiquetas .col-* establecen apariencia (ni color de borde ni de fondo), solamente establecen la anchura, y por lo tanto al renderizar el c\u00f3digo anterior tal cual las cajas se ver\u00e1n transparentes. Dado que las columnas se han especificado \u00fanicamente mediante las clases .col-md-* esto crear\u00e1 estas divisiones solo para las pantallas medianas y grandes, pero no para los tama\u00f1os de pantalla m\u00e1s peque\u00f1os. En este \u00faltimo caso las columnas se ampliar\u00e1n para ocupar todo el ancho y por lo tanto se mostrar\u00e1n apiladas de la forma:","title":"Selecci\u00f3n de tama\u00f1o de las columnas solo para pantallas medianas"},{"location":"rejilla-columnas-de-ancho-especifico.html#seleccion-de-dos-tamanos-de-columna-pequeno-y-mediano","text":"Si no queremos que las columnas se muestren apiladas para tama\u00f1os de pantalla peque\u00f1os podemos indicar tambi\u00e9n la disposici\u00f3n para esos casos mediante las clases .col-* adem\u00e1s de las que ya ten\u00edamos con .col-md-* . Por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <!-- En pantallas peque\u00f1as aparecer\u00e1 una columna que ocupar\u00e1 todo el ancho y otra que ocupar\u00e1 la mitad de la pantalla --> < div class = \"row\" > < div class = \"col-12 col-md-8\" > .col-12 .col-md-8 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > </ div > <!-- En pantallas medianas se indica que cada columna ocupe la mitad del ancho disponible --> < div class = \"row\" > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > </ div > <!-- Como no se indica el tama\u00f1o para pantallas grandes las columnas siempre ocupar\u00e1n el 50% --> < div class = \"row\" > < div class = \"col-6\" > .col-6 </ div > < div class = \"col-6\" > .col-6 </ div > </ div > En la siguiente imagen se puede ver como quedar\u00eda el c\u00f3digo de ejemplo para pantallas medianas y grandes (tama\u00f1os de md en adelante): En el caso de pantallas peque\u00f1as las columnas se ver\u00edan de la forma:","title":"Selecci\u00f3n de dos tama\u00f1os de columna: peque\u00f1o y mediano"},{"location":"rejilla-columnas-de-ancho-especifico.html#seleccion-de-tres-tamanos-extra-pequeno-pequeno-y-mediano","text":"Si queremos tener un mayor control podemos especificar tambi\u00e9n el tama\u00f1o de las columnas para las pantallas tipo small con las clases .col-sm-* . Por ejemplo: 1 2 3 4 5 6 7 8 9 < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-8\" > .col-12 .col-sm-6 .col-md-8 </ div > < div class = \"col-6 col-md-4\" > .col-6 .col-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-6 col-sm-4\" > .col-6 .col-sm-4 </ div > < div class = \"col-6 col-sm-4\" > .col-6 .col-sm-4 </ div > < div class = \"col-6 col-sm-4\" > .col-6 .col-sm-4 </ div > </ div > A continuaci\u00f3n se incluye una previsualizaci\u00f3n de este c\u00f3digo de ejemplo para pantallas medianas y grandes (tama\u00f1os md, lg, xl y xxl): El mismo c\u00f3digo pero en pantallas tipo small (tama\u00f1o sm) se mostrar\u00eda como: Y en el caso de pantallas peque\u00f1as se ver\u00eda de la forma: Adem\u00e1s de los tres tama\u00f1os indicados en este \u00faltimo ejemplo para la primera columna ( .col-12 .col-sm-6 .col-md-8 ) podr\u00edamos a\u00f1adir tambi\u00e9n, si lo necesitamos, el tama\u00f1o para pantallas grandes, extra grandes y extra extra grandes con .col-lg- , col-xl- y col-xxl- . Por ejemplo, podr\u00edamos haber definido la siguiente columna: 1 < div class = \"col-12 col-sm-6 col-md-8 col-lg-9 col-xl-10 col-xxl-11\" > ... </ div > En resumen, podemos indicar para cada columna todos los tama\u00f1os que queramos de entre los disponibles (con .col- , .col-sm- , .col-md- , .col-lg- , .col-xl- y .col-xxl- ). Sin embargo, esto solo lo tendremos que hacer cuando necesitemos establecer un ancho de columna distinto para cada tama\u00f1o de pantalla. Si para todos los tama\u00f1os de pantalla necesitamos el mismo ancho, entonces utilizaremos solamente la clase .col- . Es decir, no tendr\u00eda sentido escribir algo como \" col-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 \", ya que se conseguir\u00eda el mismo efecto que si hubieramos puesto solamente \" col-6 \". Por lo tanto, solo a\u00f1adiremos m\u00e1s de una clase cuando necesitemos establecer anchos distintos entre esos tama\u00f1os, y adem\u00e1s, si solo vamos a diferenciar entre 2 tama\u00f1os, solo ser\u00e1 necesario usar 2 etiquetas. Por ejemplo, si queremos diferenciar solamente entre movil y escritorio solamente tendr\u00edamos que a\u00f1adir la clase .col- y la clase .col-md- .","title":"Selecci\u00f3n de tres tama\u00f1os: extra peque\u00f1o, peque\u00f1o y mediano"},{"location":"rejilla-forzar-el-cambio-de-fila.html","text":"Forzar el cambio de fila \u00b6 Mediante la clase .w-100 podemos forzar el cambio de fila cuando nosotros queramos: 1 2 3 4 5 6 7 8 9 10 < div class = \"row\" > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > <!-- Force next columns to break to new line --> < div class = \"w-100\" ></ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > </ div > Con lo que obtendr\u00edamos dos filas con dos columnas cada una: Esta clase tambi\u00e9n nos puede ser \u00fatil para forzar el cambio de fila solo para determinados tama\u00f1os de pantalla. Para esto tenemos que combinarla con otras clases de Bootstrap que nos permiten mostrar u ocultar elementos seg\u00fan el tama\u00f1o de pantalla. A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 8 9 10 < div class = \"row\" > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > <!-- Force next columns to break to new line at md breakpoint and up --> < div class = \"w-100 d-none d-md-block\" ></ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > </ div > Donde la clase \" .d-none \" significa que no se muestre ese elemento (para ning\u00fan tama\u00f1o), y la clase \" .d-md-block \" indica que se muestre a partir del tama\u00f1o de pantalla \" md \" en adelante. Por lo tanto, el campo div marcado con \"w-100\" permanecer\u00e1 oculto para los tama\u00f1os extra peque\u00f1o y peque\u00f1o, y por lo tanto no se activar\u00e1 el cambio de fila para esos dos tama\u00f1os, pero s\u00ed para los tama\u00f1os desde \"md\" en adelante. En la secci\u00f3n \"Utilidades Responsive\" se explicar\u00e1n las etiquetas \".d-*\" que nos permir\u00e1n controlar la visibilidad de cualquier elemento HTML en funci\u00f3n del tama\u00f1o de pantalla.","title":"Forzar el cambio de fila"},{"location":"rejilla-forzar-el-cambio-de-fila.html#forzar-el-cambio-de-fila","text":"Mediante la clase .w-100 podemos forzar el cambio de fila cuando nosotros queramos: 1 2 3 4 5 6 7 8 9 10 < div class = \"row\" > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > <!-- Force next columns to break to new line --> < div class = \"w-100\" ></ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > </ div > Con lo que obtendr\u00edamos dos filas con dos columnas cada una: Esta clase tambi\u00e9n nos puede ser \u00fatil para forzar el cambio de fila solo para determinados tama\u00f1os de pantalla. Para esto tenemos que combinarla con otras clases de Bootstrap que nos permiten mostrar u ocultar elementos seg\u00fan el tama\u00f1o de pantalla. A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 8 9 10 < div class = \"row\" > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > <!-- Force next columns to break to new line at md breakpoint and up --> < div class = \"w-100 d-none d-md-block\" ></ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > < div class = \"col-6 col-sm-3\" > .col-6 .col-sm-3 </ div > </ div > Donde la clase \" .d-none \" significa que no se muestre ese elemento (para ning\u00fan tama\u00f1o), y la clase \" .d-md-block \" indica que se muestre a partir del tama\u00f1o de pantalla \" md \" en adelante. Por lo tanto, el campo div marcado con \"w-100\" permanecer\u00e1 oculto para los tama\u00f1os extra peque\u00f1o y peque\u00f1o, y por lo tanto no se activar\u00e1 el cambio de fila para esos dos tama\u00f1os, pero s\u00ed para los tama\u00f1os desde \"md\" en adelante. En la secci\u00f3n \"Utilidades Responsive\" se explicar\u00e1n las etiquetas \".d-*\" que nos permir\u00e1n controlar la visibilidad de cualquier elemento HTML en funci\u00f3n del tama\u00f1o de pantalla.","title":"Forzar el cambio de fila"},{"location":"rejilla-margenes-o-espaciado-entre-columnas.html","text":"Espaciado entre columnas \u00b6 Es posible crear un espaciado entre las columnas o dicho de otra forma, mover o desplazar una columna hacia la derecha , a\u00f1adiendo un offset inicial mediante las clases: .offset-* . Por ejemplo .offset-4 crear\u00e1 un espacio a la izquierda de la columna de tama\u00f1o 4 (como si se creara una columna oculta de tipo .col-4 ). En el siguiente c\u00f3digo podemos ver un ejemplo m\u00e1s completo: 1 2 3 4 5 6 7 8 9 10 11 < div class = \"row\" > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4 offset-md-4\" > .col-md-4 .offset-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-md-3 offset-md-3\" > .col-md-3 .offset-md-3 </ div > < div class = \"col-md-3 offset-md-3\" > .col-md-3 .offset-md-3 </ div > </ div > < div class = \"row\" > < div class = \"col-md-6 offset-md-3\" > .col-md-6 .offset-md-3 </ div > </ div > El cual se renderizar\u00eda de la forma: Como se puede ver en el ejemplo anterior, tambi\u00e9n podemos especificar el offset seg\u00fan el tama\u00f1o de pantalla. Si usamos, por ejemplo, la clase \" offset-4 \" estaremos indicando que se cree un espacio de 4 para todos los tama\u00f1os de pantalla; mientras que con \" offset-md-4 \" se crear\u00e1 este espacio a partir del tama\u00f1o de pantalla \"md\" en adelante. Si en alg\u00fan caso necesitamos eliminar el offset podemos utilizar el tama\u00f1o cero (0). Por ejemplo, si especificamos un offset de 2 para tama\u00f1os peque\u00f1os y no queremos que dicho offset se aplique para pantallas medianas ni grandes tendr\u00edamos que hacer: 1 < div class = \"col-sm-5 offset-sm-2 col-md-7 offset-md-0\" > ... </ div > M\u00e1rgenes \u00b6 Adem\u00e1s de la clase offset tambi\u00e9n disponemos de las clases para crear m\u00e1rgenes de espacio variable tanto al lado izquierdo (con \" .ml-auto \") como al lado derecho (con .mr-auto ) de una columna. A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 < div class = \"row\" > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4 ml-auto\" > .col-md-4 .ml-auto </ div > </ div > < div class = \"row\" > < div class = \"col-md-3 ml-md-auto\" > .col-md-3 .ml-md-auto </ div > < div class = \"col-md-3 ml-md-auto\" > .col-md-3 .ml-md-auto </ div > </ div > < div class = \"row\" > < div class = \"col-auto mr-auto\" > .col-auto .mr-auto </ div > < div class = \"col-auto\" > .col-auto </ div > </ div > Con lo que obtendr\u00edamos el siguiente resultado: Como se puede ver, en la primera fila se crea un marge autom\u00e1tico por la izquierda (y para todos los tama\u00f1os) de la segunda columna, lo que provoca el desplazamiento de esta hasta alinearla a la derecha. En la segunda fila se a\u00f1ade margen por la izquierda a las dos columnas para tama\u00f1os de pantalla de \"md\" en adelante. Y en la \u00faltima fila se crea un margen autom\u00e1tico por la derecha de la primera columna (para todos los tama\u00f1os), esto provoca un efecto similar al obtenido en la primera fila.","title":"M\u00e1rgenes o espaciado entre columnas"},{"location":"rejilla-margenes-o-espaciado-entre-columnas.html#espaciado-entre-columnas","text":"Es posible crear un espaciado entre las columnas o dicho de otra forma, mover o desplazar una columna hacia la derecha , a\u00f1adiendo un offset inicial mediante las clases: .offset-* . Por ejemplo .offset-4 crear\u00e1 un espacio a la izquierda de la columna de tama\u00f1o 4 (como si se creara una columna oculta de tipo .col-4 ). En el siguiente c\u00f3digo podemos ver un ejemplo m\u00e1s completo: 1 2 3 4 5 6 7 8 9 10 11 < div class = \"row\" > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4 offset-md-4\" > .col-md-4 .offset-md-4 </ div > </ div > < div class = \"row\" > < div class = \"col-md-3 offset-md-3\" > .col-md-3 .offset-md-3 </ div > < div class = \"col-md-3 offset-md-3\" > .col-md-3 .offset-md-3 </ div > </ div > < div class = \"row\" > < div class = \"col-md-6 offset-md-3\" > .col-md-6 .offset-md-3 </ div > </ div > El cual se renderizar\u00eda de la forma: Como se puede ver en el ejemplo anterior, tambi\u00e9n podemos especificar el offset seg\u00fan el tama\u00f1o de pantalla. Si usamos, por ejemplo, la clase \" offset-4 \" estaremos indicando que se cree un espacio de 4 para todos los tama\u00f1os de pantalla; mientras que con \" offset-md-4 \" se crear\u00e1 este espacio a partir del tama\u00f1o de pantalla \"md\" en adelante. Si en alg\u00fan caso necesitamos eliminar el offset podemos utilizar el tama\u00f1o cero (0). Por ejemplo, si especificamos un offset de 2 para tama\u00f1os peque\u00f1os y no queremos que dicho offset se aplique para pantallas medianas ni grandes tendr\u00edamos que hacer: 1 < div class = \"col-sm-5 offset-sm-2 col-md-7 offset-md-0\" > ... </ div >","title":"Espaciado entre columnas"},{"location":"rejilla-margenes-o-espaciado-entre-columnas.html#margenes","text":"Adem\u00e1s de la clase offset tambi\u00e9n disponemos de las clases para crear m\u00e1rgenes de espacio variable tanto al lado izquierdo (con \" .ml-auto \") como al lado derecho (con .mr-auto ) de una columna. A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 < div class = \"row\" > < div class = \"col-md-4\" > .col-md-4 </ div > < div class = \"col-md-4 ml-auto\" > .col-md-4 .ml-auto </ div > </ div > < div class = \"row\" > < div class = \"col-md-3 ml-md-auto\" > .col-md-3 .ml-md-auto </ div > < div class = \"col-md-3 ml-md-auto\" > .col-md-3 .ml-md-auto </ div > </ div > < div class = \"row\" > < div class = \"col-auto mr-auto\" > .col-auto .mr-auto </ div > < div class = \"col-auto\" > .col-auto </ div > </ div > Con lo que obtendr\u00edamos el siguiente resultado: Como se puede ver, en la primera fila se crea un marge autom\u00e1tico por la izquierda (y para todos los tama\u00f1os) de la segunda columna, lo que provoca el desplazamiento de esta hasta alinearla a la derecha. En la segunda fila se a\u00f1ade margen por la izquierda a las dos columnas para tama\u00f1os de pantalla de \"md\" en adelante. Y en la \u00faltima fila se crea un margen autom\u00e1tico por la derecha de la primera columna (para todos los tama\u00f1os), esto provoca un efecto similar al obtenido en la primera fila.","title":"M\u00e1rgenes"},{"location":"rejilla-ordenacion-de-columnas.html","text":"Ordenaci\u00f3n de columnas \u00b6 Tambi\u00e9n podemos modificar el orden visual de las columnas mediante la clase .order- . Esta clase permite indicar la posici\u00f3n a la cual queremos desplazar la columna (del 1 al 5, por ejemplo .order-1 , .order-2 , etc.). Tambi\u00e9n podemos especificar el tama\u00f1o de pantalla para el que queremos que se aplique (por ejemplo .order-md-3 ). A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > First, but unordered </ div > < div class = \"col order-3\" > Second, but last </ div > < div class = \"col order-1\" > Third, but first </ div > <!-- \u00a1\u00a1CUIDADO!! --> </ div > </ div > Obteniendo como resultado: Si nos fijamos en el resultado obtenido podemos ver que no se obtiene el resultado esperado, la tercera columna (en color rojo) aparece en la segunda posici\u00f3n en lugar de en la primera como se hab\u00eda indicado con \" order-1 \". Esto es debido a un peque\u00f1o error al cambiar el orden de derecha izquierda. En los casos en los que simplemente queramos mover una columna hacia la derecha no se producir\u00e1 este error, pero si queremos mover hacia la izquierda ser\u00e1 necesario que establezcamos el order de todas las columnas. Por lo tanto, para que funcione correctamente el ejemplo anterior tendr\u00edamos que escribir el siguiente c\u00f3digo: 1 2 3 4 5 6 7 < div class = \"container\" > < div class = \"row\" > < div class = \"col order-2\" > First, but unordered </ div > <!-- A\u00f1adimos el orden de esta columna --> < div class = \"col order-3\" > Second, but last </ div > < div class = \"col order-1\" > Third, but first </ div > </ div > </ div > Obteniendo ahora s\u00ed el resultado esperado: Como se puede ver tambi\u00e9n en este ejemplo, no es necesario que los n\u00fameros de columna para la ordenaci\u00f3n sean consecutivos, simplemente se ordenar\u00e1n de mayor a menor. Hay que tener cuidado con estas clases si hay un salto de l\u00ednea dentro de una misma fila (debido a que el n\u00famero de columnas ocupe m\u00e1s de 12), ya que en estos casos el orden no funcionar\u00e1n correctamente. Tambi\u00e9n disponemos de la clase \" .order-first \", la cual nos permitir\u00e1 situar cualquier elemento en primer lugar. Adem\u00e1s, esta clase s\u00ed que funciona aunque haya un salto de l\u00ednea.","title":"Ordenaci\u00f3n de columnas"},{"location":"rejilla-ordenacion-de-columnas.html#ordenacion-de-columnas","text":"Tambi\u00e9n podemos modificar el orden visual de las columnas mediante la clase .order- . Esta clase permite indicar la posici\u00f3n a la cual queremos desplazar la columna (del 1 al 5, por ejemplo .order-1 , .order-2 , etc.). Tambi\u00e9n podemos especificar el tama\u00f1o de pantalla para el que queremos que se aplique (por ejemplo .order-md-3 ). A continuaci\u00f3n se incluye un ejemplo: 1 2 3 4 5 6 7 < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > First, but unordered </ div > < div class = \"col order-3\" > Second, but last </ div > < div class = \"col order-1\" > Third, but first </ div > <!-- \u00a1\u00a1CUIDADO!! --> </ div > </ div > Obteniendo como resultado: Si nos fijamos en el resultado obtenido podemos ver que no se obtiene el resultado esperado, la tercera columna (en color rojo) aparece en la segunda posici\u00f3n en lugar de en la primera como se hab\u00eda indicado con \" order-1 \". Esto es debido a un peque\u00f1o error al cambiar el orden de derecha izquierda. En los casos en los que simplemente queramos mover una columna hacia la derecha no se producir\u00e1 este error, pero si queremos mover hacia la izquierda ser\u00e1 necesario que establezcamos el order de todas las columnas. Por lo tanto, para que funcione correctamente el ejemplo anterior tendr\u00edamos que escribir el siguiente c\u00f3digo: 1 2 3 4 5 6 7 < div class = \"container\" > < div class = \"row\" > < div class = \"col order-2\" > First, but unordered </ div > <!-- A\u00f1adimos el orden de esta columna --> < div class = \"col order-3\" > Second, but last </ div > < div class = \"col order-1\" > Third, but first </ div > </ div > </ div > Obteniendo ahora s\u00ed el resultado esperado: Como se puede ver tambi\u00e9n en este ejemplo, no es necesario que los n\u00fameros de columna para la ordenaci\u00f3n sean consecutivos, simplemente se ordenar\u00e1n de mayor a menor. Hay que tener cuidado con estas clases si hay un salto de l\u00ednea dentro de una misma fila (debido a que el n\u00famero de columnas ocupe m\u00e1s de 12), ya que en estos casos el orden no funcionar\u00e1n correctamente. Tambi\u00e9n disponemos de la clase \" .order-first \", la cual nos permitir\u00e1 situar cualquier elemento en primer lugar. Adem\u00e1s, esta clase s\u00ed que funciona aunque haya un salto de l\u00ednea.","title":"Ordenaci\u00f3n de columnas"},{"location":"rejilla.html","text":"Sistema de rejilla \u00b6 El sistema de rejilla de Bootstrap se basa en la creaci\u00f3n o disposici\u00f3n del contenido de nuestra web dentro de rejillas flexibles, las cuales se escalar\u00e1n al tama\u00f1o y posici\u00f3n adecuada de forma autom\u00e1tica dependiendo del tama\u00f1o de la pantalla en la que se rendericen. Elemento contenedor \u00b6 El sistema de rejilla tiene que ser utilizado dentro de uno de los dos elementos contenedores que provee Bootstrap: container \u00f3 container-fluid . Es importante tener en cuenta que estos elementos se utilizan como ra\u00edz de la rejilla y no se podr\u00e1n anidar unos dentro de otros. Si lo que queremos es que el contenido de nuestra web aparezca centrado y con un ancho fijo entonces podemos utilizar la etiqueta .container , de la forma: 1 2 3 < div class = \"container\" > ... </ div > Por el contrario, si queremos que el contenido de nuestra web pueda ocupar todo el ancho disponible (hay que tener en mente todos los tama\u00f1os de pantalla, incluso las muy grandes), podemos usar la etiqueta .container-fluid : 1 2 3 < div class = \"container-fluid\" > ... </ div > En las siguientes im\u00e1genes se ejemplifica el resultado obtenido para un mismo ancho al aplicar los dos tipos de contenedores, container en el primer caso y container-fluid en el segundo. El comportamiento de estos elementos ante distintos tama\u00f1os de pantalla es el siguiente: el elemento \"container-fluid\" siempre se adapta al 100% del tama\u00f1o de la pantalla, mientras que el tipo \"container\" tiene un tama\u00f1o m\u00e1ximo, por lo que si el ancho de la pantalla es superior a este ancho el contenido aparecer\u00e1 centrano, dejando un margen a cada lado, y si el ancho de la pantalla es igual o inferior al tama\u00f1o m\u00e1ximo del contenedor, entonces se adaptar\u00e1 al ancho disponible. Funcionamiento del sistema de rejilla \u00b6 El sistema de rejilla est\u00e1 pensado para ayudarnos en la disposici\u00f3n de los contenidos de nuestra web y su adaptaci\u00f3n a los diferentes tama\u00f1os de pantalla de forma autom\u00e1tica. Para ello tenemos que poner el contenido dentro de celdas o columnas que ir\u00e1n dentro de filas. Cada fila se puede dividir hasta en 12 columnas, pero seremos nosotros los que definiremos el n\u00famero de columnas deseado para cada tama\u00f1o de pantalla. A continuaci\u00f3n se detalla el funcionamiento de este sistema: Las columnas ir\u00e1n agrupadas dentro de filas ( .row ). Las filas ( .row ) se deben colocar dentro de una etiqueta contenedora: .container (para ancho fijo) o .container-fluid (para poder ocupar todo el ancho), esto permitir\u00e1 alinear las celdas y asignarles el espaciado correcto. El contenido se debe disponer dentro de columnas o celdas, las cuales deben de ser el \u00fanico hijo posible de las filas ( .row ), las cuales, a su vez, ser\u00e1n el \u00fanico hijo posible del contenedor ( .container o .container-fluid ). Al seguir este orden el sistema de rejilla funcionar\u00e1 correctamente, creando el espaciado interior y los m\u00e1rgenes apropiados dependiendo de las dimensiones de la pantalla. Cada fila se puede dividir hasta un m\u00e1ximo de 12 columnas, pero somos nosotros los que tendremos que definir el n\u00famero de columnas en el que queremos dividir cada fila y su ancho para cada tama\u00f1o de pantalla. Por ejemplo: 3 columnas de igual ancho. Si el tama\u00f1o total de las columnas de una fila excede de 12 el tama\u00f1o sobrante se colocar\u00e1 en la siguiente fila. El tama\u00f1o de las columnas se especificar\u00e1 con clases css que Bootstrap define para cada tama\u00f1o de pantalla, por ejemplo .col-md-XX , donde XX es el tama\u00f1o de la columna, que podr\u00e1 tomar valores entre 1 y 12. En la siguiente tabla se muestra un resumen del sistema de rejilla de Bootstrap, su comportamiento seg\u00fan el tama\u00f1o del dispositivo y las clases CSS que nos permiten controlarlo: Tama\u00f1o de pantalla Dimensiones Prefijo de la clase Ancho del contenedor extra peque\u00f1o < 576 px .col- Ninguno (autom\u00e1tico) peque\u00f1o \u2265 576 px .col-sm- 540px medio \u2265 768 px .col-md- 720px grande \u2265 992 px .col-lg- 960px extra grande \u2265 1200 px .col-xl- 1140px extra extra grande \u2265 1400px .col-xxl- 1320px Es importante destacar que al definir estas clases no solo se aplican para ese tama\u00f1o de pantalla sino para los superiores tambi\u00e9n. Por ejemplo, al indicar el tama\u00f1o de las columnas con las clases para tablets ( .col-sm- ), tambi\u00e9n se aplicar\u00e1 para los tama\u00f1os de pantalla medianos y grandes (si no hubieran otras clases para estos tama\u00f1os que los sobreescribieran). Es decir, nos tenemos que fijar que en la tabla anterior el tama\u00f1o se indica con el s\u00edmbolo de mayor o igual (\u2265) (o de menor para el caso de xs) a un tama\u00f1o dado, y por lo tanto se aplicar\u00e1 esa disposici\u00f3n a partir de ese tama\u00f1o, a no ser que se indique otra cosa. Bootstrap est\u00e1 dise\u00f1ado pensando en los dispositivos m\u00f3viles primero (o como ellos indican: siguiendo la estrategia mobile first). Por lo tanto todos los tama\u00f1os y dimensiones est\u00e1n pensadas para los dispositivos m\u00f3viles, y para tama\u00f1os m\u00e1s grandes lo que hacen es adaptar o escalar estos tama\u00f1os. Si nos fijamos en la tabla anterior podremos ver que para el tama\u00f1o extra peque\u00f1o el prefijo de la clase que se define es \" .col- \" (a diferencia de los dem\u00e1s que a\u00f1aden un sufijo para el tama\u00f1o de pantalla). Cuando indiquemos el tama\u00f1o de las columnas usando esta clase se aplicar\u00e1 para todos los tama\u00f1os, a no ser, como ya hemos dicho, que se indique otra clase para otro tama\u00f1o mayor que defina otra disposici\u00f3n. A continuaci\u00f3n veremos diferentes formas de indicar el n\u00famero de columnas que conforman cada fila, usando el sistema autom\u00e1tico, especificando el ancho o bien usando un sistema mixto.","title":"Funcionamiento"},{"location":"rejilla.html#sistema-de-rejilla","text":"El sistema de rejilla de Bootstrap se basa en la creaci\u00f3n o disposici\u00f3n del contenido de nuestra web dentro de rejillas flexibles, las cuales se escalar\u00e1n al tama\u00f1o y posici\u00f3n adecuada de forma autom\u00e1tica dependiendo del tama\u00f1o de la pantalla en la que se rendericen.","title":"Sistema de rejilla"},{"location":"rejilla.html#elemento-contenedor","text":"El sistema de rejilla tiene que ser utilizado dentro de uno de los dos elementos contenedores que provee Bootstrap: container \u00f3 container-fluid . Es importante tener en cuenta que estos elementos se utilizan como ra\u00edz de la rejilla y no se podr\u00e1n anidar unos dentro de otros. Si lo que queremos es que el contenido de nuestra web aparezca centrado y con un ancho fijo entonces podemos utilizar la etiqueta .container , de la forma: 1 2 3 < div class = \"container\" > ... </ div > Por el contrario, si queremos que el contenido de nuestra web pueda ocupar todo el ancho disponible (hay que tener en mente todos los tama\u00f1os de pantalla, incluso las muy grandes), podemos usar la etiqueta .container-fluid : 1 2 3 < div class = \"container-fluid\" > ... </ div > En las siguientes im\u00e1genes se ejemplifica el resultado obtenido para un mismo ancho al aplicar los dos tipos de contenedores, container en el primer caso y container-fluid en el segundo. El comportamiento de estos elementos ante distintos tama\u00f1os de pantalla es el siguiente: el elemento \"container-fluid\" siempre se adapta al 100% del tama\u00f1o de la pantalla, mientras que el tipo \"container\" tiene un tama\u00f1o m\u00e1ximo, por lo que si el ancho de la pantalla es superior a este ancho el contenido aparecer\u00e1 centrano, dejando un margen a cada lado, y si el ancho de la pantalla es igual o inferior al tama\u00f1o m\u00e1ximo del contenedor, entonces se adaptar\u00e1 al ancho disponible.","title":"Elemento contenedor"},{"location":"rejilla.html#funcionamiento-del-sistema-de-rejilla","text":"El sistema de rejilla est\u00e1 pensado para ayudarnos en la disposici\u00f3n de los contenidos de nuestra web y su adaptaci\u00f3n a los diferentes tama\u00f1os de pantalla de forma autom\u00e1tica. Para ello tenemos que poner el contenido dentro de celdas o columnas que ir\u00e1n dentro de filas. Cada fila se puede dividir hasta en 12 columnas, pero seremos nosotros los que definiremos el n\u00famero de columnas deseado para cada tama\u00f1o de pantalla. A continuaci\u00f3n se detalla el funcionamiento de este sistema: Las columnas ir\u00e1n agrupadas dentro de filas ( .row ). Las filas ( .row ) se deben colocar dentro de una etiqueta contenedora: .container (para ancho fijo) o .container-fluid (para poder ocupar todo el ancho), esto permitir\u00e1 alinear las celdas y asignarles el espaciado correcto. El contenido se debe disponer dentro de columnas o celdas, las cuales deben de ser el \u00fanico hijo posible de las filas ( .row ), las cuales, a su vez, ser\u00e1n el \u00fanico hijo posible del contenedor ( .container o .container-fluid ). Al seguir este orden el sistema de rejilla funcionar\u00e1 correctamente, creando el espaciado interior y los m\u00e1rgenes apropiados dependiendo de las dimensiones de la pantalla. Cada fila se puede dividir hasta un m\u00e1ximo de 12 columnas, pero somos nosotros los que tendremos que definir el n\u00famero de columnas en el que queremos dividir cada fila y su ancho para cada tama\u00f1o de pantalla. Por ejemplo: 3 columnas de igual ancho. Si el tama\u00f1o total de las columnas de una fila excede de 12 el tama\u00f1o sobrante se colocar\u00e1 en la siguiente fila. El tama\u00f1o de las columnas se especificar\u00e1 con clases css que Bootstrap define para cada tama\u00f1o de pantalla, por ejemplo .col-md-XX , donde XX es el tama\u00f1o de la columna, que podr\u00e1 tomar valores entre 1 y 12. En la siguiente tabla se muestra un resumen del sistema de rejilla de Bootstrap, su comportamiento seg\u00fan el tama\u00f1o del dispositivo y las clases CSS que nos permiten controlarlo: Tama\u00f1o de pantalla Dimensiones Prefijo de la clase Ancho del contenedor extra peque\u00f1o < 576 px .col- Ninguno (autom\u00e1tico) peque\u00f1o \u2265 576 px .col-sm- 540px medio \u2265 768 px .col-md- 720px grande \u2265 992 px .col-lg- 960px extra grande \u2265 1200 px .col-xl- 1140px extra extra grande \u2265 1400px .col-xxl- 1320px Es importante destacar que al definir estas clases no solo se aplican para ese tama\u00f1o de pantalla sino para los superiores tambi\u00e9n. Por ejemplo, al indicar el tama\u00f1o de las columnas con las clases para tablets ( .col-sm- ), tambi\u00e9n se aplicar\u00e1 para los tama\u00f1os de pantalla medianos y grandes (si no hubieran otras clases para estos tama\u00f1os que los sobreescribieran). Es decir, nos tenemos que fijar que en la tabla anterior el tama\u00f1o se indica con el s\u00edmbolo de mayor o igual (\u2265) (o de menor para el caso de xs) a un tama\u00f1o dado, y por lo tanto se aplicar\u00e1 esa disposici\u00f3n a partir de ese tama\u00f1o, a no ser que se indique otra cosa. Bootstrap est\u00e1 dise\u00f1ado pensando en los dispositivos m\u00f3viles primero (o como ellos indican: siguiendo la estrategia mobile first). Por lo tanto todos los tama\u00f1os y dimensiones est\u00e1n pensadas para los dispositivos m\u00f3viles, y para tama\u00f1os m\u00e1s grandes lo que hacen es adaptar o escalar estos tama\u00f1os. Si nos fijamos en la tabla anterior podremos ver que para el tama\u00f1o extra peque\u00f1o el prefijo de la clase que se define es \" .col- \" (a diferencia de los dem\u00e1s que a\u00f1aden un sufijo para el tama\u00f1o de pantalla). Cuando indiquemos el tama\u00f1o de las columnas usando esta clase se aplicar\u00e1 para todos los tama\u00f1os, a no ser, como ya hemos dicho, que se indique otra clase para otro tama\u00f1o mayor que defina otra disposici\u00f3n. A continuaci\u00f3n veremos diferentes formas de indicar el n\u00famero de columnas que conforman cada fila, usando el sistema autom\u00e1tico, especificando el ancho o bien usando un sistema mixto.","title":"Funcionamiento del sistema de rejilla"},{"location":"utilidades-responsive.html","text":"Utilidades Responsive \u00b6 Bootstrap tambi\u00e9n incluye una serie de clases para ayudarnos a mostrar u ocultar contenidos seg\u00fan el tama\u00f1o del dispositivo. En primer lugar vamos a ver las clases base que utlizaremos para estas acciones: .d-none : Oculta el elemento sobre el que se aplique. .d-inline : Muestra el elemento de forma \"inline\", es decir, permitiendo otros elementos por los lados y ocupando el ancho justo. .d-block : Muestra el elemento en forma de bloque, ocupando todo el ancho disponible y sin permitir otros elementos por los lados. .d-inline-block: Muestra el elemento en forma de bloque, pero ocupando el ancho justo y permitiendo otros elementos por los lados. A continuaci\u00f3n podemos ver un ejemplo del efecto obtenido al aplicar las distintas etiquetas de las que disponemos para mostrar elementos: La diferencia entre las etiquetas \" d-inline\" y \" d-inline-block \" es el comportamiento de bloque que adopta el elemento, el cual respetar\u00e1 todos los m\u00e1rgenes y alguras que le indiquemos. Al aplicar estas etiquetas sobre un elemento lo mostraremos u ocultaremos para todos los tama\u00f1os , sin embargo, si queremos podemos a\u00f1adirles modificadores para indicar el tama\u00f1o a partir del cual queremos que se muestren u oculten. En este \u00faltimo caso tendremos que a\u00f1adir el tama\u00f1o de pantalla entre el prefijo \" d- \" y el sufijo none , inline , block o inline-block , es decir, siguiendo el patr\u00f3n \" d-*-* \". Por ejemplo, podremos indicar d-sm-none para que se oculte a partir del tama\u00f1o peque\u00f1o de pantalla, d-xl-none para que se oculte para las pantallas extra granes, o d-md-block para que se muestre en forma de bloque a partir del tama\u00f1o md . Es importante que nos fijemos que estas utilidades responsive se aplicar\u00e1n a partir del tama\u00f1o indicado en adelante, sin embargo, \u00bfc\u00f3mo podr\u00edamos hacer para que solamente se oculte o se muestre para un tama\u00f1o de pantalla? Para esto podemos combinar varias clases , por ejemplo, para que solo se oculte para el tama\u00f1o extra peque\u00f1o tendr\u00edamos que poner \" d-none d-sm-block \", o para que solo se muestre para el tama\u00f1o peque\u00f1o usar\u00edamos \" d-none d-sm-block d-md-none \". A continuaci\u00f3n se incluye una tabla resumen de las etiquetas que tendr\u00edamos que aplicar para mostrar u ocultar solamente para un tama\u00f1o de pantalla: Tama\u00f1os de pantalla Mostrar Ocultar Solo para tama\u00f1os extra peque\u00f1os d-block d-sm-none d-none d-sm-block Solo para tama\u00f1os peque\u00f1os (sm) d-none d-sm-block d-md-none d-sm-none d-md-block Solo para tama\u00f1os medianos (md) d-none d-md-block d-lg-none d-md-none d-lg-block Solo para tama\u00f1os grandes (lg) d-none d-lg-block d-xl-none d-lg-none d-xl-block Solo para tama\u00f1os extra grandes (xl) d-none d-xl-block d-xxl-none d-xl-none d-xxl-block Solo para tama\u00f1os extra extra grandes (xxl) d-none d-xxl-block d-xxl-none","title":"Utilidades Responsive"},{"location":"utilidades-responsive.html#utilidades-responsive","text":"Bootstrap tambi\u00e9n incluye una serie de clases para ayudarnos a mostrar u ocultar contenidos seg\u00fan el tama\u00f1o del dispositivo. En primer lugar vamos a ver las clases base que utlizaremos para estas acciones: .d-none : Oculta el elemento sobre el que se aplique. .d-inline : Muestra el elemento de forma \"inline\", es decir, permitiendo otros elementos por los lados y ocupando el ancho justo. .d-block : Muestra el elemento en forma de bloque, ocupando todo el ancho disponible y sin permitir otros elementos por los lados. .d-inline-block: Muestra el elemento en forma de bloque, pero ocupando el ancho justo y permitiendo otros elementos por los lados. A continuaci\u00f3n podemos ver un ejemplo del efecto obtenido al aplicar las distintas etiquetas de las que disponemos para mostrar elementos: La diferencia entre las etiquetas \" d-inline\" y \" d-inline-block \" es el comportamiento de bloque que adopta el elemento, el cual respetar\u00e1 todos los m\u00e1rgenes y alguras que le indiquemos. Al aplicar estas etiquetas sobre un elemento lo mostraremos u ocultaremos para todos los tama\u00f1os , sin embargo, si queremos podemos a\u00f1adirles modificadores para indicar el tama\u00f1o a partir del cual queremos que se muestren u oculten. En este \u00faltimo caso tendremos que a\u00f1adir el tama\u00f1o de pantalla entre el prefijo \" d- \" y el sufijo none , inline , block o inline-block , es decir, siguiendo el patr\u00f3n \" d-*-* \". Por ejemplo, podremos indicar d-sm-none para que se oculte a partir del tama\u00f1o peque\u00f1o de pantalla, d-xl-none para que se oculte para las pantallas extra granes, o d-md-block para que se muestre en forma de bloque a partir del tama\u00f1o md . Es importante que nos fijemos que estas utilidades responsive se aplicar\u00e1n a partir del tama\u00f1o indicado en adelante, sin embargo, \u00bfc\u00f3mo podr\u00edamos hacer para que solamente se oculte o se muestre para un tama\u00f1o de pantalla? Para esto podemos combinar varias clases , por ejemplo, para que solo se oculte para el tama\u00f1o extra peque\u00f1o tendr\u00edamos que poner \" d-none d-sm-block \", o para que solo se muestre para el tama\u00f1o peque\u00f1o usar\u00edamos \" d-none d-sm-block d-md-none \". A continuaci\u00f3n se incluye una tabla resumen de las etiquetas que tendr\u00edamos que aplicar para mostrar u ocultar solamente para un tama\u00f1o de pantalla: Tama\u00f1os de pantalla Mostrar Ocultar Solo para tama\u00f1os extra peque\u00f1os d-block d-sm-none d-none d-sm-block Solo para tama\u00f1os peque\u00f1os (sm) d-none d-sm-block d-md-none d-sm-none d-md-block Solo para tama\u00f1os medianos (md) d-none d-md-block d-lg-none d-md-none d-lg-block Solo para tama\u00f1os grandes (lg) d-none d-lg-block d-xl-none d-lg-none d-xl-block Solo para tama\u00f1os extra grandes (xl) d-none d-xl-block d-xxl-none d-xl-none d-xxl-block Solo para tama\u00f1os extra extra grandes (xxl) d-none d-xxl-block d-xxl-none","title":"Utilidades Responsive"}]}